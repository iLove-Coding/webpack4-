(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"F/us":function(n,r,t){(function(n,t){var e;!function(){var u="object"==typeof self&&self.self===self&&self||"object"==typeof n&&n.global===n&&n||this||{},i=u._,o=Array.prototype,a=Object.prototype,c="undefined"!=typeof Symbol?Symbol.prototype:null,l=o.push,f=o.slice,s=a.toString,p=a.hasOwnProperty,h=Array.isArray,v=Object.keys,y=Object.create,d=function(){},g=function(n){return n instanceof g?n:this instanceof g?void(this._wrapped=n):new g(n)};r.nodeType?u._=g:(!t.nodeType&&t.exports&&(r=t.exports=g),r._=g),g.VERSION="1.9.1";var m,b=function(n,r,t){if(void 0===r)return n;switch(null==t?3:t){case 1:return function(t){return n.call(r,t)};case 3:return function(t,e,u){return n.call(r,t,e,u)};case 4:return function(t,e,u,i){return n.call(r,t,e,u,i)}}return function(){return n.apply(r,arguments)}},j=function(n,r,t){return g.iteratee!==m?g.iteratee(n,r):null==n?g.identity:g.isFunction(n)?b(n,r,t):g.isObject(n)&&!g.isArray(n)?g.matcher(n):g.property(n)};g.iteratee=m=function(n,r){return j(n,r,1/0)};var w=function(n,r){return r=null==r?n.length-1:+r,function(){for(var t=Math.max(arguments.length-r,0),e=Array(t),u=0;u<t;u++)e[u]=arguments[u+r];switch(r){case 0:return n.call(this,e);case 1:return n.call(this,arguments[0],e);case 2:return n.call(this,arguments[0],arguments[1],e)}var i=Array(r+1);for(u=0;u<r;u++)i[u]=arguments[u];return i[r]=e,n.apply(this,i)}},x=function(n){if(!g.isObject(n))return{};if(y)return y(n);d.prototype=n;var r=new d;return d.prototype=null,r},_=function(n){return function(r){return null==r?void 0:r[n]}},A=function(n,r){return null!=n&&p.call(n,r)},k=function(n,r){for(var t=r.length,e=0;e<t;e++){if(null==n)return;n=n[r[e]]}return t?n:void 0},O=Math.pow(2,53)-1,S=_("length"),F=function(n){var r=S(n);return"number"==typeof r&&r>=0&&r<=O};g.each=g.forEach=function(n,r,t){var e,u;if(r=b(r,t),F(n))for(e=0,u=n.length;e<u;e++)r(n[e],e,n);else{var i=g.keys(n);for(e=0,u=i.length;e<u;e++)r(n[i[e]],i[e],n)}return n},g.map=g.collect=function(n,r,t){r=j(r,t);for(var e=!F(n)&&g.keys(n),u=(e||n).length,i=Array(u),o=0;o<u;o++){var a=e?e[o]:o;i[o]=r(n[a],a,n)}return i};var M=function(n){return function(r,t,e,u){var i=arguments.length>=3;return function(r,t,e,u){var i=!F(r)&&g.keys(r),o=(i||r).length,a=n>0?0:o-1;for(u||(e=r[i?i[a]:a],a+=n);a>=0&&a<o;a+=n){var c=i?i[a]:a;e=t(e,r[c],c,r)}return e}(r,b(t,u,4),e,i)}};g.reduce=g.foldl=g.inject=M(1),g.reduceRight=g.foldr=M(-1),g.find=g.detect=function(n,r,t){var e=(F(n)?g.findIndex:g.findKey)(n,r,t);if(void 0!==e&&-1!==e)return n[e]},g.filter=g.select=function(n,r,t){var e=[];return r=j(r,t),g.each(n,function(n,t,u){r(n,t,u)&&e.push(n)}),e},g.reject=function(n,r,t){return g.filter(n,g.negate(j(r)),t)},g.every=g.all=function(n,r,t){r=j(r,t);for(var e=!F(n)&&g.keys(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(!r(n[o],o,n))return!1}return!0},g.some=g.any=function(n,r,t){r=j(r,t);for(var e=!F(n)&&g.keys(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(r(n[o],o,n))return!0}return!1},g.contains=g.includes=g.include=function(n,r,t,e){return F(n)||(n=g.values(n)),("number"!=typeof t||e)&&(t=0),g.indexOf(n,r,t)>=0},g.invoke=w(function(n,r,t){var e,u;return g.isFunction(r)?u=r:g.isArray(r)&&(e=r.slice(0,-1),r=r[r.length-1]),g.map(n,function(n){var i=u;if(!i){if(e&&e.length&&(n=k(n,e)),null==n)return;i=n[r]}return null==i?i:i.apply(n,t)})}),g.pluck=function(n,r){return g.map(n,g.property(r))},g.where=function(n,r){return g.filter(n,g.matcher(r))},g.findWhere=function(n,r){return g.find(n,g.matcher(r))},g.max=function(n,r,t){var e,u,i=-1/0,o=-1/0;if(null==r||"number"==typeof r&&"object"!=typeof n[0]&&null!=n)for(var a=0,c=(n=F(n)?n:g.values(n)).length;a<c;a++)null!=(e=n[a])&&e>i&&(i=e);else r=j(r,t),g.each(n,function(n,t,e){((u=r(n,t,e))>o||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i},g.min=function(n,r,t){var e,u,i=1/0,o=1/0;if(null==r||"number"==typeof r&&"object"!=typeof n[0]&&null!=n)for(var a=0,c=(n=F(n)?n:g.values(n)).length;a<c;a++)null!=(e=n[a])&&e<i&&(i=e);else r=j(r,t),g.each(n,function(n,t,e){((u=r(n,t,e))<o||u===1/0&&i===1/0)&&(i=n,o=u)});return i},g.shuffle=function(n){return g.sample(n,1/0)},g.sample=function(n,r,t){if(null==r||t)return F(n)||(n=g.values(n)),n[g.random(n.length-1)];var e=F(n)?g.clone(n):g.values(n),u=S(e);r=Math.max(Math.min(r,u),0);for(var i=u-1,o=0;o<r;o++){var a=g.random(o,i),c=e[o];e[o]=e[a],e[a]=c}return e.slice(0,r)},g.sortBy=function(n,r,t){var e=0;return r=j(r,t),g.pluck(g.map(n,function(n,t,u){return{value:n,index:e++,criteria:r(n,t,u)}}).sort(function(n,r){var t=n.criteria,e=r.criteria;if(t!==e){if(t>e||void 0===t)return 1;if(t<e||void 0===e)return-1}return n.index-r.index}),"value")};var E=function(n,r){return function(t,e,u){var i=r?[[],[]]:{};return e=j(e,u),g.each(t,function(r,u){var o=e(r,u,t);n(i,r,o)}),i}};g.groupBy=E(function(n,r,t){A(n,t)?n[t].push(r):n[t]=[r]}),g.indexBy=E(function(n,r,t){n[t]=r}),g.countBy=E(function(n,r,t){A(n,t)?n[t]++:n[t]=1});var N=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;g.toArray=function(n){return n?g.isArray(n)?f.call(n):g.isString(n)?n.match(N):F(n)?g.map(n,g.identity):g.values(n):[]},g.size=function(n){return null==n?0:F(n)?n.length:g.keys(n).length},g.partition=E(function(n,r,t){n[t?0:1].push(r)},!0),g.first=g.head=g.take=function(n,r,t){return null==n||n.length<1?null==r?void 0:[]:null==r||t?n[0]:g.initial(n,n.length-r)},g.initial=function(n,r,t){return f.call(n,0,Math.max(0,n.length-(null==r||t?1:r)))},g.last=function(n,r,t){return null==n||n.length<1?null==r?void 0:[]:null==r||t?n[n.length-1]:g.rest(n,Math.max(0,n.length-r))},g.rest=g.tail=g.drop=function(n,r,t){return f.call(n,null==r||t?1:r)},g.compact=function(n){return g.filter(n,Boolean)};var I=function(n,r,t,e){for(var u=(e=e||[]).length,i=0,o=S(n);i<o;i++){var a=n[i];if(F(a)&&(g.isArray(a)||g.isArguments(a)))if(r)for(var c=0,l=a.length;c<l;)e[u++]=a[c++];else I(a,r,t,e),u=e.length;else t||(e[u++]=a)}return e};g.flatten=function(n,r){return I(n,r,!1)},g.without=w(function(n,r){return g.difference(n,r)}),g.uniq=g.unique=function(n,r,t,e){g.isBoolean(r)||(e=t,t=r,r=!1),null!=t&&(t=j(t,e));for(var u=[],i=[],o=0,a=S(n);o<a;o++){var c=n[o],l=t?t(c,o,n):c;r&&!t?(o&&i===l||u.push(c),i=l):t?g.contains(i,l)||(i.push(l),u.push(c)):g.contains(u,c)||u.push(c)}return u},g.union=w(function(n){return g.uniq(I(n,!0,!0))}),g.intersection=function(n){for(var r=[],t=arguments.length,e=0,u=S(n);e<u;e++){var i=n[e];if(!g.contains(r,i)){var o;for(o=1;o<t&&g.contains(arguments[o],i);o++);o===t&&r.push(i)}}return r},g.difference=w(function(n,r){return r=I(r,!0,!0),g.filter(n,function(n){return!g.contains(r,n)})}),g.unzip=function(n){for(var r=n&&g.max(n,S).length||0,t=Array(r),e=0;e<r;e++)t[e]=g.pluck(n,e);return t},g.zip=w(g.unzip),g.object=function(n,r){for(var t={},e=0,u=S(n);e<u;e++)r?t[n[e]]=r[e]:t[n[e][0]]=n[e][1];return t};var T=function(n){return function(r,t,e){t=j(t,e);for(var u=S(r),i=n>0?0:u-1;i>=0&&i<u;i+=n)if(t(r[i],i,r))return i;return-1}};g.findIndex=T(1),g.findLastIndex=T(-1),g.sortedIndex=function(n,r,t,e){for(var u=(t=j(t,e,1))(r),i=0,o=S(n);i<o;){var a=Math.floor((i+o)/2);t(n[a])<u?i=a+1:o=a}return i};var B=function(n,r,t){return function(e,u,i){var o=0,a=S(e);if("number"==typeof i)n>0?o=i>=0?i:Math.max(i+a,o):a=i>=0?Math.min(i+1,a):i+a+1;else if(t&&i&&a)return e[i=t(e,u)]===u?i:-1;if(u!=u)return(i=r(f.call(e,o,a),g.isNaN))>=0?i+o:-1;for(i=n>0?o:a-1;i>=0&&i<a;i+=n)if(e[i]===u)return i;return-1}};g.indexOf=B(1,g.findIndex,g.sortedIndex),g.lastIndexOf=B(-1,g.findLastIndex),g.range=function(n,r,t){null==r&&(r=n||0,n=0),t||(t=r<n?-1:1);for(var e=Math.max(Math.ceil((r-n)/t),0),u=Array(e),i=0;i<e;i++,n+=t)u[i]=n;return u},g.chunk=function(n,r){if(null==r||r<1)return[];for(var t=[],e=0,u=n.length;e<u;)t.push(f.call(n,e,e+=r));return t};var R=function(n,r,t,e,u){if(!(e instanceof r))return n.apply(t,u);var i=x(n.prototype),o=n.apply(i,u);return g.isObject(o)?o:i};g.bind=w(function(n,r,t){if(!g.isFunction(n))throw new TypeError("Bind must be called on a function");var e=w(function(u){return R(n,e,r,this,t.concat(u))});return e}),g.partial=w(function(n,r){var t=g.partial.placeholder,e=function(){for(var u=0,i=r.length,o=Array(i),a=0;a<i;a++)o[a]=r[a]===t?arguments[u++]:r[a];for(;u<arguments.length;)o.push(arguments[u++]);return R(n,e,this,this,o)};return e}),g.partial.placeholder=g,g.bindAll=w(function(n,r){var t=(r=I(r,!1,!1)).length;if(t<1)throw new Error("bindAll must be passed function names");for(;t--;){var e=r[t];n[e]=g.bind(n[e],n)}}),g.memoize=function(n,r){var t=function(e){var u=t.cache,i=""+(r?r.apply(this,arguments):e);return A(u,i)||(u[i]=n.apply(this,arguments)),u[i]};return t.cache={},t},g.delay=w(function(n,r,t){return setTimeout(function(){return n.apply(null,t)},r)}),g.defer=g.partial(g.delay,g,1),g.throttle=function(n,r,t){var e,u,i,o,a=0;t||(t={});var c=function(){a=!1===t.leading?0:g.now(),e=null,o=n.apply(u,i),e||(u=i=null)},l=function(){var l=g.now();a||!1!==t.leading||(a=l);var f=r-(l-a);return u=this,i=arguments,f<=0||f>r?(e&&(clearTimeout(e),e=null),a=l,o=n.apply(u,i),e||(u=i=null)):e||!1===t.trailing||(e=setTimeout(c,f)),o};return l.cancel=function(){clearTimeout(e),a=0,e=u=i=null},l},g.debounce=function(n,r,t){var e,u,i=function(r,t){e=null,t&&(u=n.apply(r,t))},o=w(function(o){if(e&&clearTimeout(e),t){var a=!e;e=setTimeout(i,r),a&&(u=n.apply(this,o))}else e=g.delay(i,r,this,o);return u});return o.cancel=function(){clearTimeout(e),e=null},o},g.wrap=function(n,r){return g.partial(r,n)},g.negate=function(n){return function(){return!n.apply(this,arguments)}},g.compose=function(){var n=arguments,r=n.length-1;return function(){for(var t=r,e=n[r].apply(this,arguments);t--;)e=n[t].call(this,e);return e}},g.after=function(n,r){return function(){if(--n<1)return r.apply(this,arguments)}},g.before=function(n,r){var t;return function(){return--n>0&&(t=r.apply(this,arguments)),n<=1&&(r=null),t}},g.once=g.partial(g.before,2),g.restArguments=w;var q=!{toString:null}.propertyIsEnumerable("toString"),K=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],z=function(n,r){var t=K.length,e=n.constructor,u=g.isFunction(e)&&e.prototype||a,i="constructor";for(A(n,i)&&!g.contains(r,i)&&r.push(i);t--;)(i=K[t])in n&&n[i]!==u[i]&&!g.contains(r,i)&&r.push(i)};g.keys=function(n){if(!g.isObject(n))return[];if(v)return v(n);var r=[];for(var t in n)A(n,t)&&r.push(t);return q&&z(n,r),r},g.allKeys=function(n){if(!g.isObject(n))return[];var r=[];for(var t in n)r.push(t);return q&&z(n,r),r},g.values=function(n){for(var r=g.keys(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=n[r[u]];return e},g.mapObject=function(n,r,t){r=j(r,t);for(var e=g.keys(n),u=e.length,i={},o=0;o<u;o++){var a=e[o];i[a]=r(n[a],a,n)}return i},g.pairs=function(n){for(var r=g.keys(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=[r[u],n[r[u]]];return e},g.invert=function(n){for(var r={},t=g.keys(n),e=0,u=t.length;e<u;e++)r[n[t[e]]]=t[e];return r},g.functions=g.methods=function(n){var r=[];for(var t in n)g.isFunction(n[t])&&r.push(t);return r.sort()};var D=function(n,r){return function(t){var e=arguments.length;if(r&&(t=Object(t)),e<2||null==t)return t;for(var u=1;u<e;u++)for(var i=arguments[u],o=n(i),a=o.length,c=0;c<a;c++){var l=o[c];r&&void 0!==t[l]||(t[l]=i[l])}return t}};g.extend=D(g.allKeys),g.extendOwn=g.assign=D(g.keys),g.findKey=function(n,r,t){r=j(r,t);for(var e,u=g.keys(n),i=0,o=u.length;i<o;i++)if(r(n[e=u[i]],e,n))return e};var L,J,P=function(n,r,t){return r in t};g.pick=w(function(n,r){var t={},e=r[0];if(null==n)return t;g.isFunction(e)?(r.length>1&&(e=b(e,r[1])),r=g.allKeys(n)):(e=P,r=I(r,!1,!1),n=Object(n));for(var u=0,i=r.length;u<i;u++){var o=r[u],a=n[o];e(a,o,n)&&(t[o]=a)}return t}),g.omit=w(function(n,r){var t,e=r[0];return g.isFunction(e)?(e=g.negate(e),r.length>1&&(t=r[1])):(r=g.map(I(r,!1,!1),String),e=function(n,t){return!g.contains(r,t)}),g.pick(n,e,t)}),g.defaults=D(g.allKeys,!0),g.create=function(n,r){var t=x(n);return r&&g.extendOwn(t,r),t},g.clone=function(n){return g.isObject(n)?g.isArray(n)?n.slice():g.extend({},n):n},g.tap=function(n,r){return r(n),n},g.isMatch=function(n,r){var t=g.keys(r),e=t.length;if(null==n)return!e;for(var u=Object(n),i=0;i<e;i++){var o=t[i];if(r[o]!==u[o]||!(o in u))return!1}return!0},L=function(n,r,t,e){if(n===r)return 0!==n||1/n==1/r;if(null==n||null==r)return!1;if(n!=n)return r!=r;var u=typeof n;return("function"===u||"object"===u||"object"==typeof r)&&J(n,r,t,e)},J=function(n,r,t,e){n instanceof g&&(n=n._wrapped),r instanceof g&&(r=r._wrapped);var u=s.call(n);if(u!==s.call(r))return!1;switch(u){case"[object RegExp]":case"[object String]":return""+n==""+r;case"[object Number]":return+n!=+n?+r!=+r:0==+n?1/+n==1/r:+n==+r;case"[object Date]":case"[object Boolean]":return+n==+r;case"[object Symbol]":return c.valueOf.call(n)===c.valueOf.call(r)}var i="[object Array]"===u;if(!i){if("object"!=typeof n||"object"!=typeof r)return!1;var o=n.constructor,a=r.constructor;if(o!==a&&!(g.isFunction(o)&&o instanceof o&&g.isFunction(a)&&a instanceof a)&&"constructor"in n&&"constructor"in r)return!1}e=e||[];for(var l=(t=t||[]).length;l--;)if(t[l]===n)return e[l]===r;if(t.push(n),e.push(r),i){if((l=n.length)!==r.length)return!1;for(;l--;)if(!L(n[l],r[l],t,e))return!1}else{var f,p=g.keys(n);if(l=p.length,g.keys(r).length!==l)return!1;for(;l--;)if(f=p[l],!A(r,f)||!L(n[f],r[f],t,e))return!1}return t.pop(),e.pop(),!0},g.isEqual=function(n,r){return L(n,r)},g.isEmpty=function(n){return null==n||(F(n)&&(g.isArray(n)||g.isString(n)||g.isArguments(n))?0===n.length:0===g.keys(n).length)},g.isElement=function(n){return!(!n||1!==n.nodeType)},g.isArray=h||function(n){return"[object Array]"===s.call(n)},g.isObject=function(n){var r=typeof n;return"function"===r||"object"===r&&!!n},g.each(["Arguments","Function","String","Number","Date","RegExp","Error","Symbol","Map","WeakMap","Set","WeakSet"],function(n){g["is"+n]=function(r){return s.call(r)==="[object "+n+"]"}}),g.isArguments(arguments)||(g.isArguments=function(n){return A(n,"callee")});var W=u.document&&u.document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof W&&(g.isFunction=function(n){return"function"==typeof n||!1}),g.isFinite=function(n){return!g.isSymbol(n)&&isFinite(n)&&!isNaN(parseFloat(n))},g.isNaN=function(n){return g.isNumber(n)&&isNaN(n)},g.isBoolean=function(n){return!0===n||!1===n||"[object Boolean]"===s.call(n)},g.isNull=function(n){return null===n},g.isUndefined=function(n){return void 0===n},g.has=function(n,r){if(!g.isArray(r))return A(n,r);for(var t=r.length,e=0;e<t;e++){var u=r[e];if(null==n||!p.call(n,u))return!1;n=n[u]}return!!t},g.noConflict=function(){return u._=i,this},g.identity=function(n){return n},g.constant=function(n){return function(){return n}},g.noop=function(){},g.property=function(n){return g.isArray(n)?function(r){return k(r,n)}:_(n)},g.propertyOf=function(n){return null==n?function(){}:function(r){return g.isArray(r)?k(n,r):n[r]}},g.matcher=g.matches=function(n){return n=g.extendOwn({},n),function(r){return g.isMatch(r,n)}},g.times=function(n,r,t){var e=Array(Math.max(0,n));r=b(r,t,1);for(var u=0;u<n;u++)e[u]=r(u);return e},g.random=function(n,r){return null==r&&(r=n,n=0),n+Math.floor(Math.random()*(r-n+1))},g.now=Date.now||function(){return(new Date).getTime()};var C={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},U=g.invert(C),V=function(n){var r=function(r){return n[r]},t="(?:"+g.keys(n).join("|")+")",e=RegExp(t),u=RegExp(t,"g");return function(n){return n=null==n?"":""+n,e.test(n)?n.replace(u,r):n}};g.escape=V(C),g.unescape=V(U),g.result=function(n,r,t){g.isArray(r)||(r=[r]);var e=r.length;if(!e)return g.isFunction(t)?t.call(n):t;for(var u=0;u<e;u++){var i=null==n?void 0:n[r[u]];void 0===i&&(i=t,u=e),n=g.isFunction(i)?i.call(n):i}return n};var Y=0;g.uniqueId=function(n){var r=++Y+"";return n?n+r:r},g.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var $=/(.)^/,G={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},H=/\\|'|\r|\n|\u2028|\u2029/g,Q=function(n){return"\\"+G[n]};g.template=function(n,r,t){!r&&t&&(r=t),r=g.defaults({},r,g.templateSettings);var e,u=RegExp([(r.escape||$).source,(r.interpolate||$).source,(r.evaluate||$).source].join("|")+"|$","g"),i=0,o="__p+='";n.replace(u,function(r,t,e,u,a){return o+=n.slice(i,a).replace(H,Q),i=a+r.length,t?o+="'+\n((__t=("+t+"))==null?'':_.escape(__t))+\n'":e?o+="'+\n((__t=("+e+"))==null?'':__t)+\n'":u&&(o+="';\n"+u+"\n__p+='"),r}),o+="';\n",r.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{e=new Function(r.variable||"obj","_",o)}catch(n){throw n.source=o,n}var a=function(n){return e.call(this,n,g)},c=r.variable||"obj";return a.source="function("+c+"){\n"+o+"}",a},g.chain=function(n){var r=g(n);return r._chain=!0,r};var X=function(n,r){return n._chain?g(r).chain():r};g.mixin=function(n){return g.each(g.functions(n),function(r){var t=g[r]=n[r];g.prototype[r]=function(){var n=[this._wrapped];return l.apply(n,arguments),X(this,t.apply(g,n))}}),g},g.mixin(g),g.each(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var r=o[n];g.prototype[n]=function(){var t=this._wrapped;return r.apply(t,arguments),"shift"!==n&&"splice"!==n||0!==t.length||delete t[0],X(this,t)}}),g.each(["concat","join","slice"],function(n){var r=o[n];g.prototype[n]=function(){return X(this,r.apply(this._wrapped,arguments))}}),g.prototype.value=function(){return this._wrapped},g.prototype.valueOf=g.prototype.toJSON=g.prototype.value,g.prototype.toString=function(){return String(this._wrapped)},void 0===(e=function(){return g}.apply(r,[]))||(t.exports=e)}()}).call(this,t("yLpj"),t("YuTi")(n))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL3Rvbmd0b25nL0RvY3VtZW50cy93ZWJwYWNrNOWtpuS5oC9zcGxpdC1jaHVuay9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS91bmRlcnNjb3JlLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsIm1vZHVsZSIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwicm9vdCIsInNlbGYiLCJ0aGlzIiwicHJldmlvdXNVbmRlcnNjb3JlIiwiXyIsIkFycmF5UHJvdG8iLCJBcnJheSIsInByb3RvdHlwZSIsIk9ialByb3RvIiwiT2JqZWN0IiwiU3ltYm9sUHJvdG8iLCJTeW1ib2wiLCJwdXNoIiwic2xpY2UiLCJ0b1N0cmluZyIsImhhc093blByb3BlcnR5IiwibmF0aXZlSXNBcnJheSIsImlzQXJyYXkiLCJuYXRpdmVLZXlzIiwia2V5cyIsIm5hdGl2ZUNyZWF0ZSIsImNyZWF0ZSIsIkN0b3IiLCJvYmoiLCJfd3JhcHBlZCIsImV4cG9ydHMiLCJub2RlVHlwZSIsIlZFUlNJT04iLCJidWlsdGluSXRlcmF0ZWUiLCJvcHRpbWl6ZUNiIiwiZnVuYyIsImNvbnRleHQiLCJhcmdDb3VudCIsInZhbHVlIiwiY2FsbCIsImluZGV4IiwiY29sbGVjdGlvbiIsImFjY3VtdWxhdG9yIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjYiIsIml0ZXJhdGVlIiwiaWRlbnRpdHkiLCJpc0Z1bmN0aW9uIiwiaXNPYmplY3QiLCJtYXRjaGVyIiwicHJvcGVydHkiLCJJbmZpbml0eSIsInJlc3RBcmd1bWVudHMiLCJzdGFydEluZGV4IiwibGVuZ3RoIiwiTWF0aCIsIm1heCIsInJlc3QiLCJhcmdzIiwiYmFzZUNyZWF0ZSIsInJlc3VsdCIsInNoYWxsb3dQcm9wZXJ0eSIsImtleSIsImhhcyIsInBhdGgiLCJkZWVwR2V0IiwiaSIsIk1BWF9BUlJBWV9JTkRFWCIsInBvdyIsImdldExlbmd0aCIsImlzQXJyYXlMaWtlIiwiZWFjaCIsImZvckVhY2giLCJtYXAiLCJjb2xsZWN0IiwicmVzdWx0cyIsImN1cnJlbnRLZXkiLCJjcmVhdGVSZWR1Y2UiLCJkaXIiLCJtZW1vIiwiaW5pdGlhbCIsInJlZHVjZXIiLCJyZWR1Y2UiLCJmb2xkbCIsImluamVjdCIsInJlZHVjZVJpZ2h0IiwiZm9sZHIiLCJmaW5kIiwiZGV0ZWN0IiwicHJlZGljYXRlIiwiZmluZEluZGV4IiwiZmluZEtleSIsImZpbHRlciIsInNlbGVjdCIsImxpc3QiLCJyZWplY3QiLCJuZWdhdGUiLCJldmVyeSIsImFsbCIsInNvbWUiLCJhbnkiLCJjb250YWlucyIsImluY2x1ZGVzIiwiaW5jbHVkZSIsIml0ZW0iLCJmcm9tSW5kZXgiLCJndWFyZCIsInZhbHVlcyIsImluZGV4T2YiLCJpbnZva2UiLCJjb250ZXh0UGF0aCIsIm1ldGhvZCIsInBsdWNrIiwid2hlcmUiLCJhdHRycyIsImZpbmRXaGVyZSIsImNvbXB1dGVkIiwibGFzdENvbXB1dGVkIiwidiIsIm1pbiIsInNodWZmbGUiLCJzYW1wbGUiLCJuIiwicmFuZG9tIiwiY2xvbmUiLCJsYXN0IiwicmFuZCIsInRlbXAiLCJzb3J0QnkiLCJjcml0ZXJpYSIsInNvcnQiLCJsZWZ0IiwicmlnaHQiLCJhIiwiYiIsImdyb3VwIiwiYmVoYXZpb3IiLCJwYXJ0aXRpb24iLCJncm91cEJ5IiwiaW5kZXhCeSIsImNvdW50QnkiLCJyZVN0clN5bWJvbCIsInRvQXJyYXkiLCJpc1N0cmluZyIsIm1hdGNoIiwic2l6ZSIsInBhc3MiLCJmaXJzdCIsImhlYWQiLCJ0YWtlIiwiYXJyYXkiLCJ0YWlsIiwiZHJvcCIsImNvbXBhY3QiLCJCb29sZWFuIiwiZmxhdHRlbiIsImlucHV0Iiwic2hhbGxvdyIsInN0cmljdCIsIm91dHB1dCIsImlkeCIsImlzQXJndW1lbnRzIiwiaiIsImxlbiIsIndpdGhvdXQiLCJvdGhlckFycmF5cyIsImRpZmZlcmVuY2UiLCJ1bmlxIiwidW5pcXVlIiwiaXNTb3J0ZWQiLCJpc0Jvb2xlYW4iLCJzZWVuIiwidW5pb24iLCJhcnJheXMiLCJpbnRlcnNlY3Rpb24iLCJhcmdzTGVuZ3RoIiwidW56aXAiLCJ6aXAiLCJvYmplY3QiLCJjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlciIsImZpbmRMYXN0SW5kZXgiLCJzb3J0ZWRJbmRleCIsImxvdyIsImhpZ2giLCJtaWQiLCJmbG9vciIsImNyZWF0ZUluZGV4RmluZGVyIiwicHJlZGljYXRlRmluZCIsImlzTmFOIiwibGFzdEluZGV4T2YiLCJyYW5nZSIsInN0YXJ0Iiwic3RvcCIsInN0ZXAiLCJjZWlsIiwiY2h1bmsiLCJjb3VudCIsImV4ZWN1dGVCb3VuZCIsInNvdXJjZUZ1bmMiLCJib3VuZEZ1bmMiLCJjYWxsaW5nQ29udGV4dCIsImJpbmQiLCJUeXBlRXJyb3IiLCJib3VuZCIsImNhbGxBcmdzIiwiY29uY2F0IiwicGFydGlhbCIsImJvdW5kQXJncyIsInBsYWNlaG9sZGVyIiwicG9zaXRpb24iLCJiaW5kQWxsIiwiRXJyb3IiLCJtZW1vaXplIiwiaGFzaGVyIiwiY2FjaGUiLCJhZGRyZXNzIiwiZGVsYXkiLCJ3YWl0Iiwic2V0VGltZW91dCIsImRlZmVyIiwidGhyb3R0bGUiLCJvcHRpb25zIiwidGltZW91dCIsInByZXZpb3VzIiwibGF0ZXIiLCJsZWFkaW5nIiwibm93IiwidGhyb3R0bGVkIiwicmVtYWluaW5nIiwiY2xlYXJUaW1lb3V0IiwidHJhaWxpbmciLCJjYW5jZWwiLCJkZWJvdW5jZSIsImltbWVkaWF0ZSIsImRlYm91bmNlZCIsImNhbGxOb3ciLCJ3cmFwIiwid3JhcHBlciIsImNvbXBvc2UiLCJhZnRlciIsInRpbWVzIiwiYmVmb3JlIiwib25jZSIsImhhc0VudW1CdWciLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm5vbkVudW1lcmFibGVQcm9wcyIsImNvbGxlY3ROb25FbnVtUHJvcHMiLCJub25FbnVtSWR4IiwiY29uc3RydWN0b3IiLCJwcm90byIsInByb3AiLCJhbGxLZXlzIiwibWFwT2JqZWN0IiwicGFpcnMiLCJpbnZlcnQiLCJmdW5jdGlvbnMiLCJtZXRob2RzIiwibmFtZXMiLCJjcmVhdGVBc3NpZ25lciIsImtleXNGdW5jIiwiZGVmYXVsdHMiLCJzb3VyY2UiLCJsIiwiZXh0ZW5kIiwiZXh0ZW5kT3duIiwiYXNzaWduIiwiZXEiLCJkZWVwRXEiLCJrZXlJbk9iaiIsInBpY2siLCJvbWl0IiwiU3RyaW5nIiwicHJvcHMiLCJ0YXAiLCJpbnRlcmNlcHRvciIsImlzTWF0Y2giLCJhU3RhY2siLCJiU3RhY2siLCJ0eXBlIiwiY2xhc3NOYW1lIiwidmFsdWVPZiIsImFyZUFycmF5cyIsImFDdG9yIiwiYkN0b3IiLCJwb3AiLCJpc0VxdWFsIiwiaXNFbXB0eSIsImlzRWxlbWVudCIsIm5hbWUiLCJub2RlbGlzdCIsImRvY3VtZW50IiwiY2hpbGROb2RlcyIsIkludDhBcnJheSIsImlzRmluaXRlIiwiaXNTeW1ib2wiLCJwYXJzZUZsb2F0IiwiaXNOdW1iZXIiLCJpc051bGwiLCJpc1VuZGVmaW5lZCIsIm5vQ29uZmxpY3QiLCJjb25zdGFudCIsIm5vb3AiLCJwcm9wZXJ0eU9mIiwibWF0Y2hlcyIsImFjY3VtIiwiRGF0ZSIsImdldFRpbWUiLCJlc2NhcGVNYXAiLCImIiwiPCIsIj4iLCJcIiIsIiciLCJgIiwidW5lc2NhcGVNYXAiLCJjcmVhdGVFc2NhcGVyIiwiZXNjYXBlciIsImpvaW4iLCJ0ZXN0UmVnZXhwIiwiUmVnRXhwIiwicmVwbGFjZVJlZ2V4cCIsInN0cmluZyIsInRlc3QiLCJyZXBsYWNlIiwiZXNjYXBlIiwidW5lc2NhcGUiLCJmYWxsYmFjayIsImlkQ291bnRlciIsInVuaXF1ZUlkIiwicHJlZml4IiwiaWQiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiZXZhbHVhdGUiLCJpbnRlcnBvbGF0ZSIsIm5vTWF0Y2giLCJlc2NhcGVzIiwiXFwiLCJcciIsIlxuIiwi4oCoIiwi4oCpIiwiZXNjYXBlUmVnRXhwIiwiZXNjYXBlQ2hhciIsInRlbXBsYXRlIiwidGV4dCIsInNldHRpbmdzIiwib2xkU2V0dGluZ3MiLCJyZW5kZXIiLCJvZmZzZXQiLCJ2YXJpYWJsZSIsIkZ1bmN0aW9uIiwiZSIsImRhdGEiLCJhcmd1bWVudCIsImNoYWluIiwiaW5zdGFuY2UiLCJfY2hhaW4iLCJjaGFpblJlc3VsdCIsIm1peGluIiwidG9KU09OIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiaUZBQUEsU0FBQUEsRUFBQUMsR0FBQSxJQUFBQyxHQUtBLFdBUUEsSUFBQUMsRUFBQSxpQkFBQUMsOEJBQ0EsaUJBQUFKLG9CQUNBSyxNQUNBLEdBR0FDLEVBQUFILEVBQUFJLEVBR0FDLEVBQUFDLE1BQUFDLFVBQUFDLEVBQUFDLE9BQUFGLFVBQ0FHLEVBQUEsb0JBQUFDLGNBQUFKLFVBQUEsS0FHQUssRUFBQVAsRUFBQU8sS0FDQUMsRUFBQVIsRUFBQVEsTUFDQUMsRUFBQU4sRUFBQU0sU0FDQUMsRUFBQVAsRUFBQU8sZUFJQUMsRUFBQVYsTUFBQVcsUUFDQUMsRUFBQVQsT0FBQVUsS0FDQUMsRUFBQVgsT0FBQVksT0FHQUMsRUFBQSxhQUdBbEIsRUFBQSxTQUFBbUIsR0FDQSxPQUFBQSxhQUFBbkIsRUFBQW1CLEVBQ0FyQixnQkFBQUUsT0FDQUYsS0FBQXNCLFNBQUFELEdBREEsSUFBQW5CLEVBQUFtQixJQVNtQ0UsRUFBQUMsU0FNbkMxQixFQUFBSSxNQUxvQ04sRUFBQTRCLFVBQUE1QixFQUFBMkIsVUFDcENBLEVBQUEzQixFQUFBMkIsUUFBQXJCLEdBRUFxQixFQUFBckIsS0FNQUEsRUFBQXVCLFFBQUEsUUFLQSxJQW1CQUMsRUFuQkFDLEVBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxZQUFBRCxFQUFBLE9BQUFELEVBQ0EsYUFBQUUsRUFBQSxFQUFBQSxHQUNBLHVCQUFBQyxHQUNBLE9BQUFILEVBQUFJLEtBQUFILEVBQUFFLElBR0EsdUJBQUFBLEVBQUFFLEVBQUFDLEdBQ0EsT0FBQU4sRUFBQUksS0FBQUgsRUFBQUUsRUFBQUUsRUFBQUMsSUFFQSx1QkFBQUMsRUFBQUosRUFBQUUsRUFBQUMsR0FDQSxPQUFBTixFQUFBSSxLQUFBSCxFQUFBTSxFQUFBSixFQUFBRSxFQUFBQyxJQUdBLGtCQUNBLE9BQUFOLEVBQUFRLE1BQUFQLEVBQUFRLGFBU0FDLEVBQUEsU0FBQVAsRUFBQUYsRUFBQUMsR0FDQSxPQUFBNUIsRUFBQXFDLFdBQUFiLEVBQUF4QixFQUFBcUMsU0FBQVIsRUFBQUYsR0FDQSxNQUFBRSxFQUFBN0IsRUFBQXNDLFNBQ0F0QyxFQUFBdUMsV0FBQVYsR0FBQUosRUFBQUksRUFBQUYsRUFBQUMsR0FDQTVCLEVBQUF3QyxTQUFBWCxLQUFBN0IsRUFBQWEsUUFBQWdCLEdBQUE3QixFQUFBeUMsUUFBQVosR0FDQTdCLEVBQUEwQyxTQUFBYixJQU1BN0IsRUFBQXFDLFNBQUFiLEVBQUEsU0FBQUssRUFBQUYsR0FDQSxPQUFBUyxFQUFBUCxFQUFBRixFQUFBZ0IsTUFRQSxJQUFBQyxFQUFBLFNBQUFsQixFQUFBbUIsR0FFQSxPQURBQSxFQUFBLE1BQUFBLEVBQUFuQixFQUFBb0IsT0FBQSxHQUFBRCxFQUNBLFdBSUEsSUFIQSxJQUFBQyxFQUFBQyxLQUFBQyxJQUFBYixVQUFBVyxPQUFBRCxFQUFBLEdBQ0FJLEVBQUEvQyxNQUFBNEMsR0FDQWYsRUFBQSxFQUNZQSxFQUFBZSxFQUFnQmYsSUFDNUJrQixFQUFBbEIsR0FBQUksVUFBQUosRUFBQWMsR0FFQSxPQUFBQSxHQUNBLGNBQUFuQixFQUFBSSxLQUFBaEMsS0FBQW1ELEdBQ0EsY0FBQXZCLEVBQUFJLEtBQUFoQyxLQUFBcUMsVUFBQSxHQUFBYyxHQUNBLGNBQUF2QixFQUFBSSxLQUFBaEMsS0FBQXFDLFVBQUEsR0FBQUEsVUFBQSxHQUFBYyxHQUVBLElBQUFDLEVBQUFoRCxNQUFBMkMsRUFBQSxHQUNBLElBQUFkLEVBQUEsRUFBcUJBLEVBQUFjLEVBQW9CZCxJQUN6Q21CLEVBQUFuQixHQUFBSSxVQUFBSixHQUdBLE9BREFtQixFQUFBTCxHQUFBSSxFQUNBdkIsRUFBQVEsTUFBQXBDLEtBQUFvRCxLQUtBQyxFQUFBLFNBQUFoRCxHQUNBLElBQUFILEVBQUF3QyxTQUFBckMsR0FBQSxTQUNBLEdBQUFhLEVBQUEsT0FBQUEsRUFBQWIsR0FDQWUsRUFBQWYsWUFDQSxJQUFBaUQsRUFBQSxJQUFBbEMsRUFFQSxPQURBQSxFQUFBZixVQUFBLEtBQ0FpRCxHQUdBQyxFQUFBLFNBQUFDLEdBQ0EsZ0JBQUFuQyxHQUNBLGFBQUFBLE9BQUEsRUFBQUEsRUFBQW1DLEtBSUFDLEVBQUEsU0FBQXBDLEVBQUFxQyxHQUNBLGFBQUFyQyxHQUFBUixFQUFBbUIsS0FBQVgsRUFBQXFDLElBR0FDLEVBQUEsU0FBQXRDLEVBQUFxQyxHQUVBLElBREEsSUFBQVYsRUFBQVUsRUFBQVYsT0FDQVksRUFBQSxFQUFtQkEsRUFBQVosRUFBWVksSUFBQSxDQUMvQixTQUFBdkMsRUFBQSxPQUNBQSxJQUFBcUMsRUFBQUUsSUFFQSxPQUFBWixFQUFBM0IsT0FBQSxHQU9Bd0MsRUFBQVosS0FBQWEsSUFBQSxRQUNBQyxFQUFBUixFQUFBLFVBQ0FTLEVBQUEsU0FBQTlCLEdBQ0EsSUFBQWMsRUFBQWUsRUFBQTdCLEdBQ0EsdUJBQUFjLE1BQUEsR0FBQUEsR0FBQWEsR0FTQTNELEVBQUErRCxLQUFBL0QsRUFBQWdFLFFBQUEsU0FBQTdDLEVBQUFrQixFQUFBVixHQUVBLElBQUErQixFQUFBWixFQUNBLEdBRkFULEVBQUFaLEVBQUFZLEVBQUFWLEdBRUFtQyxFQUFBM0MsR0FDQSxJQUFBdUMsRUFBQSxFQUFBWixFQUFBM0IsRUFBQTJCLE9BQXNDWSxFQUFBWixFQUFZWSxJQUNsRHJCLEVBQUFsQixFQUFBdUMsS0FBQXZDLE9BRUssQ0FDTCxJQUFBSixFQUFBZixFQUFBZSxLQUFBSSxHQUNBLElBQUF1QyxFQUFBLEVBQUFaLEVBQUEvQixFQUFBK0IsT0FBdUNZLEVBQUFaLEVBQVlZLElBQ25EckIsRUFBQWxCLEVBQUFKLEVBQUEyQyxJQUFBM0MsRUFBQTJDLEdBQUF2QyxHQUdBLE9BQUFBLEdBSUFuQixFQUFBaUUsSUFBQWpFLEVBQUFrRSxRQUFBLFNBQUEvQyxFQUFBa0IsRUFBQVYsR0FDQVUsRUFBQUQsRUFBQUMsRUFBQVYsR0FJQSxJQUhBLElBQUFaLEdBQUErQyxFQUFBM0MsSUFBQW5CLEVBQUFlLEtBQUFJLEdBQ0EyQixHQUFBL0IsR0FBQUksR0FBQTJCLE9BQ0FxQixFQUFBakUsTUFBQTRDLEdBQ0FmLEVBQUEsRUFBdUJBLEVBQUFlLEVBQWdCZixJQUFBLENBQ3ZDLElBQUFxQyxFQUFBckQsSUFBQWdCLEtBQ0FvQyxFQUFBcEMsR0FBQU0sRUFBQWxCLEVBQUFpRCxLQUFBakQsR0FFQSxPQUFBZ0QsR0FJQSxJQUFBRSxFQUFBLFNBQUFDLEdBa0JBLGdCQUFBbkQsRUFBQWtCLEVBQUFrQyxFQUFBNUMsR0FDQSxJQUFBNkMsRUFBQXJDLFVBQUFXLFFBQUEsRUFDQSxPQWpCQSxTQUFBM0IsRUFBQWtCLEVBQUFrQyxFQUFBQyxHQUNBLElBQUF6RCxHQUFBK0MsRUFBQTNDLElBQUFuQixFQUFBZSxLQUFBSSxHQUNBMkIsR0FBQS9CLEdBQUFJLEdBQUEyQixPQUNBZixFQUFBdUMsRUFBQSxJQUFBeEIsRUFBQSxFQUtBLElBSkEwQixJQUNBRCxFQUFBcEQsRUFBQUosSUFBQWdCLE1BQ0FBLEdBQUF1QyxHQUVZdkMsR0FBQSxHQUFBQSxFQUFBZSxFQUE4QmYsR0FBQXVDLEVBQUEsQ0FDMUMsSUFBQUYsRUFBQXJELElBQUFnQixLQUNBd0MsRUFBQWxDLEVBQUFrQyxFQUFBcEQsRUFBQWlELEtBQUFqRCxHQUVBLE9BQUFvRCxFQUtBRSxDQUFBdEQsRUFBQU0sRUFBQVksRUFBQVYsRUFBQSxHQUFBNEMsRUFBQUMsS0FNQXhFLEVBQUEwRSxPQUFBMUUsRUFBQTJFLE1BQUEzRSxFQUFBNEUsT0FBQVAsRUFBQSxHQUdBckUsRUFBQTZFLFlBQUE3RSxFQUFBOEUsTUFBQVQsR0FBQSxHQUdBckUsRUFBQStFLEtBQUEvRSxFQUFBZ0YsT0FBQSxTQUFBN0QsRUFBQThELEVBQUF0RCxHQUNBLElBQ0EyQixHQURBUSxFQUFBM0MsR0FBQW5CLEVBQUFrRixVQUFBbEYsRUFBQW1GLFNBQ0FoRSxFQUFBOEQsRUFBQXRELEdBQ0EsWUFBQTJCLElBQUEsSUFBQUEsRUFBQSxPQUFBbkMsRUFBQW1DLElBS0F0RCxFQUFBb0YsT0FBQXBGLEVBQUFxRixPQUFBLFNBQUFsRSxFQUFBOEQsRUFBQXRELEdBQ0EsSUFBQXdDLEVBQUEsR0FLQSxPQUpBYyxFQUFBN0MsRUFBQTZDLEVBQUF0RCxHQUNBM0IsRUFBQStELEtBQUE1QyxFQUFBLFNBQUFVLEVBQUFFLEVBQUF1RCxHQUNBTCxFQUFBcEQsRUFBQUUsRUFBQXVELElBQUFuQixFQUFBM0QsS0FBQXFCLEtBRUFzQyxHQUlBbkUsRUFBQXVGLE9BQUEsU0FBQXBFLEVBQUE4RCxFQUFBdEQsR0FDQSxPQUFBM0IsRUFBQW9GLE9BQUFqRSxFQUFBbkIsRUFBQXdGLE9BQUFwRCxFQUFBNkMsSUFBQXRELElBS0EzQixFQUFBeUYsTUFBQXpGLEVBQUEwRixJQUFBLFNBQUF2RSxFQUFBOEQsRUFBQXRELEdBQ0FzRCxFQUFBN0MsRUFBQTZDLEVBQUF0RCxHQUdBLElBRkEsSUFBQVosR0FBQStDLEVBQUEzQyxJQUFBbkIsRUFBQWUsS0FBQUksR0FDQTJCLEdBQUEvQixHQUFBSSxHQUFBMkIsT0FDQWYsRUFBQSxFQUF1QkEsRUFBQWUsRUFBZ0JmLElBQUEsQ0FDdkMsSUFBQXFDLEVBQUFyRCxJQUFBZ0IsS0FDQSxJQUFBa0QsRUFBQTlELEVBQUFpRCxLQUFBakQsR0FBQSxTQUVBLFVBS0FuQixFQUFBMkYsS0FBQTNGLEVBQUE0RixJQUFBLFNBQUF6RSxFQUFBOEQsRUFBQXRELEdBQ0FzRCxFQUFBN0MsRUFBQTZDLEVBQUF0RCxHQUdBLElBRkEsSUFBQVosR0FBQStDLEVBQUEzQyxJQUFBbkIsRUFBQWUsS0FBQUksR0FDQTJCLEdBQUEvQixHQUFBSSxHQUFBMkIsT0FDQWYsRUFBQSxFQUF1QkEsRUFBQWUsRUFBZ0JmLElBQUEsQ0FDdkMsSUFBQXFDLEVBQUFyRCxJQUFBZ0IsS0FDQSxHQUFBa0QsRUFBQTlELEVBQUFpRCxLQUFBakQsR0FBQSxTQUVBLFVBS0FuQixFQUFBNkYsU0FBQTdGLEVBQUE4RixTQUFBOUYsRUFBQStGLFFBQUEsU0FBQTVFLEVBQUE2RSxFQUFBQyxFQUFBQyxHQUdBLE9BRkFwQyxFQUFBM0MsT0FBQW5CLEVBQUFtRyxPQUFBaEYsS0FDQSxpQkFBQThFLEdBQUFDLEtBQUFELEVBQUEsR0FDQWpHLEVBQUFvRyxRQUFBakYsRUFBQTZFLEVBQUFDLElBQUEsR0FJQWpHLEVBQUFxRyxPQUFBekQsRUFBQSxTQUFBekIsRUFBQXFDLEVBQUFOLEdBQ0EsSUFBQW9ELEVBQUE1RSxFQU9BLE9BTkExQixFQUFBdUMsV0FBQWlCLEdBQ0E5QixFQUFBOEIsRUFDS3hELEVBQUFhLFFBQUEyQyxLQUNMOEMsRUFBQTlDLEVBQUEvQyxNQUFBLE1BQ0ErQyxNQUFBVixPQUFBLElBRUE5QyxFQUFBaUUsSUFBQTlDLEVBQUEsU0FBQVEsR0FDQSxJQUFBNEUsRUFBQTdFLEVBQ0EsSUFBQTZFLEVBQUEsQ0FJQSxHQUhBRCxLQUFBeEQsU0FDQW5CLEVBQUE4QixFQUFBOUIsRUFBQTJFLElBRUEsTUFBQTNFLEVBQUEsT0FDQTRFLEVBQUE1RSxFQUFBNkIsR0FFQSxhQUFBK0MsTUFBQXJFLE1BQUFQLEVBQUF1QixPQUtBbEQsRUFBQXdHLE1BQUEsU0FBQXJGLEVBQUFtQyxHQUNBLE9BQUF0RCxFQUFBaUUsSUFBQTlDLEVBQUFuQixFQUFBMEMsU0FBQVksS0FLQXRELEVBQUF5RyxNQUFBLFNBQUF0RixFQUFBdUYsR0FDQSxPQUFBMUcsRUFBQW9GLE9BQUFqRSxFQUFBbkIsRUFBQXlDLFFBQUFpRSxLQUtBMUcsRUFBQTJHLFVBQUEsU0FBQXhGLEVBQUF1RixHQUNBLE9BQUExRyxFQUFBK0UsS0FBQTVELEVBQUFuQixFQUFBeUMsUUFBQWlFLEtBSUExRyxFQUFBZ0QsSUFBQSxTQUFBN0IsRUFBQWtCLEVBQUFWLEdBQ0EsSUFDQUUsRUFBQStFLEVBREF4RCxHQUFBVCxJQUFBa0UsR0FBQWxFLElBRUEsU0FBQU4sR0FBQSxpQkFBQUEsR0FBQSxpQkFBQWxCLEVBQUEsVUFBQUEsRUFFQSxRQUFBdUMsRUFBQSxFQUFBWixHQURBM0IsRUFBQTJDLEVBQUEzQyxLQUFBbkIsRUFBQW1HLE9BQUFoRixJQUNBMkIsT0FBMENZLEVBQUFaLEVBQVlZLElBRXRELE9BREE3QixFQUFBVixFQUFBdUMsS0FDQTdCLEVBQUF1QixJQUNBQSxFQUFBdkIsUUFJQVEsRUFBQUQsRUFBQUMsRUFBQVYsR0FDQTNCLEVBQUErRCxLQUFBNUMsRUFBQSxTQUFBMkYsRUFBQS9FLEVBQUF1RCxLQUNBc0IsRUFBQXZFLEVBQUF5RSxFQUFBL0UsRUFBQXVELElBQ0F1QixHQUFBRCxLQUFBakUsS0FBQVMsS0FBQVQsT0FDQVMsRUFBQTBELEVBQ0FELEVBQUFELEtBSUEsT0FBQXhELEdBSUFwRCxFQUFBK0csSUFBQSxTQUFBNUYsRUFBQWtCLEVBQUFWLEdBQ0EsSUFDQUUsRUFBQStFLEVBREF4RCxFQUFBVCxJQUFBa0UsRUFBQWxFLElBRUEsU0FBQU4sR0FBQSxpQkFBQUEsR0FBQSxpQkFBQWxCLEVBQUEsVUFBQUEsRUFFQSxRQUFBdUMsRUFBQSxFQUFBWixHQURBM0IsRUFBQTJDLEVBQUEzQyxLQUFBbkIsRUFBQW1HLE9BQUFoRixJQUNBMkIsT0FBMENZLEVBQUFaLEVBQVlZLElBRXRELE9BREE3QixFQUFBVixFQUFBdUMsS0FDQTdCLEVBQUF1QixJQUNBQSxFQUFBdkIsUUFJQVEsRUFBQUQsRUFBQUMsRUFBQVYsR0FDQTNCLEVBQUErRCxLQUFBNUMsRUFBQSxTQUFBMkYsRUFBQS9FLEVBQUF1RCxLQUNBc0IsRUFBQXZFLEVBQUF5RSxFQUFBL0UsRUFBQXVELElBQ0F1QixHQUFBRCxJQUFBakUsS0FBQVMsSUFBQVQsT0FDQVMsRUFBQTBELEVBQ0FELEVBQUFELEtBSUEsT0FBQXhELEdBSUFwRCxFQUFBZ0gsUUFBQSxTQUFBN0YsR0FDQSxPQUFBbkIsRUFBQWlILE9BQUE5RixFQUFBd0IsTUFPQTNDLEVBQUFpSCxPQUFBLFNBQUE5RixFQUFBK0YsRUFBQWhCLEdBQ0EsU0FBQWdCLEdBQUFoQixFQUVBLE9BREFwQyxFQUFBM0MsT0FBQW5CLEVBQUFtRyxPQUFBaEYsSUFDQUEsRUFBQW5CLEVBQUFtSCxPQUFBaEcsRUFBQTJCLE9BQUEsSUFFQSxJQUFBbUUsRUFBQW5ELEVBQUEzQyxHQUFBbkIsRUFBQW9ILE1BQUFqRyxHQUFBbkIsRUFBQW1HLE9BQUFoRixHQUNBMkIsRUFBQWUsRUFBQW9ELEdBQ0FDLEVBQUFuRSxLQUFBQyxJQUFBRCxLQUFBZ0UsSUFBQUcsRUFBQXBFLEdBQUEsR0FFQSxJQURBLElBQUF1RSxFQUFBdkUsRUFBQSxFQUNBZixFQUFBLEVBQXVCQSxFQUFBbUYsRUFBV25GLElBQUEsQ0FDbEMsSUFBQXVGLEVBQUF0SCxFQUFBbUgsT0FBQXBGLEVBQUFzRixHQUNBRSxFQUFBTixFQUFBbEYsR0FDQWtGLEVBQUFsRixHQUFBa0YsRUFBQUssR0FDQUwsRUFBQUssR0FBQUMsRUFFQSxPQUFBTixFQUFBeEcsTUFBQSxFQUFBeUcsSUFJQWxILEVBQUF3SCxPQUFBLFNBQUFyRyxFQUFBa0IsRUFBQVYsR0FDQSxJQUFBSSxFQUFBLEVBRUEsT0FEQU0sRUFBQUQsRUFBQUMsRUFBQVYsR0FDQTNCLEVBQUF3RyxNQUFBeEcsRUFBQWlFLElBQUE5QyxFQUFBLFNBQUFVLEVBQUF5QixFQUFBZ0MsR0FDQSxPQUNBekQsUUFDQUUsVUFDQTBGLFNBQUFwRixFQUFBUixFQUFBeUIsRUFBQWdDLE1BRUtvQyxLQUFBLFNBQUFDLEVBQUFDLEdBQ0wsSUFBQUMsRUFBQUYsRUFBQUYsU0FDQUssRUFBQUYsRUFBQUgsU0FDQSxHQUFBSSxJQUFBQyxFQUFBLENBQ0EsR0FBQUQsRUFBQUMsUUFBQSxJQUFBRCxFQUFBLFNBQ0EsR0FBQUEsRUFBQUMsUUFBQSxJQUFBQSxFQUFBLFNBRUEsT0FBQUgsRUFBQTVGLE1BQUE2RixFQUFBN0YsUUFDSyxVQUlMLElBQUFnRyxFQUFBLFNBQUFDLEVBQUFDLEdBQ0EsZ0JBQUE5RyxFQUFBa0IsRUFBQVYsR0FDQSxJQUFBeUIsRUFBQTZFLEVBQUEsV0FNQSxPQUxBNUYsRUFBQUQsRUFBQUMsRUFBQVYsR0FDQTNCLEVBQUErRCxLQUFBNUMsRUFBQSxTQUFBVSxFQUFBRSxHQUNBLElBQUF1QixFQUFBakIsRUFBQVIsRUFBQUUsRUFBQVosR0FDQTZHLEVBQUE1RSxFQUFBdkIsRUFBQXlCLEtBRUFGLElBTUFwRCxFQUFBa0ksUUFBQUgsRUFBQSxTQUFBM0UsRUFBQXZCLEVBQUF5QixHQUNBQyxFQUFBSCxFQUFBRSxHQUFBRixFQUFBRSxHQUFBOUMsS0FBQXFCLEdBQWtEdUIsRUFBQUUsR0FBQSxDQUFBekIsS0FLbEQ3QixFQUFBbUksUUFBQUosRUFBQSxTQUFBM0UsRUFBQXZCLEVBQUF5QixHQUNBRixFQUFBRSxHQUFBekIsSUFNQTdCLEVBQUFvSSxRQUFBTCxFQUFBLFNBQUEzRSxFQUFBdkIsRUFBQXlCLEdBQ0FDLEVBQUFILEVBQUFFLEdBQUFGLEVBQUFFLEtBQXdDRixFQUFBRSxHQUFBLElBR3hDLElBQUErRSxFQUFBLG1FQUVBckksRUFBQXNJLFFBQUEsU0FBQW5ILEdBQ0EsT0FBQUEsRUFDQW5CLEVBQUFhLFFBQUFNLEdBQUFWLEVBQUFxQixLQUFBWCxHQUNBbkIsRUFBQXVJLFNBQUFwSCxHQUVBQSxFQUFBcUgsTUFBQUgsR0FFQXZFLEVBQUEzQyxHQUFBbkIsRUFBQWlFLElBQUE5QyxFQUFBbkIsRUFBQXNDLFVBQ0F0QyxFQUFBbUcsT0FBQWhGLEdBUEEsSUFXQW5CLEVBQUF5SSxLQUFBLFNBQUF0SCxHQUNBLGFBQUFBLEVBQUEsRUFDQTJDLEVBQUEzQyxLQUFBMkIsT0FBQTlDLEVBQUFlLEtBQUFJLEdBQUEyQixRQUtBOUMsRUFBQWlJLFVBQUFGLEVBQUEsU0FBQTNFLEVBQUF2QixFQUFBNkcsR0FDQXRGLEVBQUFzRixFQUFBLEtBQUFsSSxLQUFBcUIsS0FDRyxHQVFIN0IsRUFBQTJJLE1BQUEzSSxFQUFBNEksS0FBQTVJLEVBQUE2SSxLQUFBLFNBQUFDLEVBQUE1QixFQUFBaEIsR0FDQSxhQUFBNEMsS0FBQWhHLE9BQUEsUUFBQW9FLE9BQUEsS0FDQSxNQUFBQSxHQUFBaEIsRUFBQTRDLEVBQUEsR0FDQTlJLEVBQUF3RSxRQUFBc0UsSUFBQWhHLE9BQUFvRSxJQU1BbEgsRUFBQXdFLFFBQUEsU0FBQXNFLEVBQUE1QixFQUFBaEIsR0FDQSxPQUFBekYsRUFBQXFCLEtBQUFnSCxFQUFBLEVBQUEvRixLQUFBQyxJQUFBLEVBQUE4RixFQUFBaEcsUUFBQSxNQUFBb0UsR0FBQWhCLEVBQUEsRUFBQWdCLE1BS0FsSCxFQUFBcUgsS0FBQSxTQUFBeUIsRUFBQTVCLEVBQUFoQixHQUNBLGFBQUE0QyxLQUFBaEcsT0FBQSxRQUFBb0UsT0FBQSxLQUNBLE1BQUFBLEdBQUFoQixFQUFBNEMsSUFBQWhHLE9BQUEsR0FDQTlDLEVBQUFpRCxLQUFBNkYsRUFBQS9GLEtBQUFDLElBQUEsRUFBQThGLEVBQUFoRyxPQUFBb0UsS0FNQWxILEVBQUFpRCxLQUFBakQsRUFBQStJLEtBQUEvSSxFQUFBZ0osS0FBQSxTQUFBRixFQUFBNUIsRUFBQWhCLEdBQ0EsT0FBQXpGLEVBQUFxQixLQUFBZ0gsRUFBQSxNQUFBNUIsR0FBQWhCLEVBQUEsRUFBQWdCLElBSUFsSCxFQUFBaUosUUFBQSxTQUFBSCxHQUNBLE9BQUE5SSxFQUFBb0YsT0FBQTBELEVBQUFJLFVBSUEsSUFBQUMsRUFBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUdBLElBREEsSUFBQUMsR0FEQUQsS0FBQSxJQUNBekcsT0FDQVksRUFBQSxFQUFBWixFQUFBZSxFQUFBdUYsR0FBOEMxRixFQUFBWixFQUFZWSxJQUFBLENBQzFELElBQUE3QixFQUFBdUgsRUFBQTFGLEdBQ0EsR0FBQUksRUFBQWpDLEtBQUE3QixFQUFBYSxRQUFBZ0IsSUFBQTdCLEVBQUF5SixZQUFBNUgsSUFFQSxHQUFBd0gsRUFFQSxJQURBLElBQUFLLEVBQUEsRUFBQUMsRUFBQTlILEVBQUFpQixPQUNBNEcsRUFBQUMsR0FBQUosRUFBQUMsS0FBQTNILEVBQUE2SCxVQUVBUCxFQUFBdEgsRUFBQXdILEVBQUFDLEVBQUFDLEdBQ0FDLEVBQUFELEVBQUF6RyxZQUVPd0csSUFDUEMsRUFBQUMsS0FBQTNILEdBR0EsT0FBQTBILEdBSUF2SixFQUFBbUosUUFBQSxTQUFBTCxFQUFBTyxHQUNBLE9BQUFGLEVBQUFMLEVBQUFPLEdBQUEsSUFJQXJKLEVBQUE0SixRQUFBaEgsRUFBQSxTQUFBa0csRUFBQWUsR0FDQSxPQUFBN0osRUFBQThKLFdBQUFoQixFQUFBZSxLQVNBN0osRUFBQStKLEtBQUEvSixFQUFBZ0ssT0FBQSxTQUFBbEIsRUFBQW1CLEVBQUE1SCxFQUFBVixHQUNBM0IsRUFBQWtLLFVBQUFELEtBQ0F0SSxFQUFBVSxFQUNBQSxFQUFBNEgsRUFDQUEsR0FBQSxHQUVBLE1BQUE1SCxNQUFBRCxFQUFBQyxFQUFBVixJQUdBLElBRkEsSUFBQXlCLEVBQUEsR0FDQStHLEVBQUEsR0FDQXpHLEVBQUEsRUFBQVosRUFBQWUsRUFBQWlGLEdBQThDcEYsRUFBQVosRUFBWVksSUFBQSxDQUMxRCxJQUFBN0IsRUFBQWlILEVBQUFwRixHQUNBa0QsRUFBQXZFLElBQUFSLEVBQUE2QixFQUFBb0YsR0FBQWpILEVBQ0FvSSxJQUFBNUgsR0FDQXFCLEdBQUF5RyxJQUFBdkQsR0FBQXhELEVBQUE1QyxLQUFBcUIsR0FDQXNJLEVBQUF2RCxHQUNPdkUsRUFDUHJDLEVBQUE2RixTQUFBc0UsRUFBQXZELEtBQ0F1RCxFQUFBM0osS0FBQW9HLEdBQ0F4RCxFQUFBNUMsS0FBQXFCLElBRU83QixFQUFBNkYsU0FBQXpDLEVBQUF2QixJQUNQdUIsRUFBQTVDLEtBQUFxQixHQUdBLE9BQUF1QixHQUtBcEQsRUFBQW9LLE1BQUF4SCxFQUFBLFNBQUF5SCxHQUNBLE9BQUFySyxFQUFBK0osS0FBQVosRUFBQWtCLEdBQUEsU0FLQXJLLEVBQUFzSyxhQUFBLFNBQUF4QixHQUdBLElBRkEsSUFBQTFGLEVBQUEsR0FDQW1ILEVBQUFwSSxVQUFBVyxPQUNBWSxFQUFBLEVBQUFaLEVBQUFlLEVBQUFpRixHQUE4Q3BGLEVBQUFaLEVBQVlZLElBQUEsQ0FDMUQsSUFBQXNDLEVBQUE4QyxFQUFBcEYsR0FDQSxJQUFBMUQsRUFBQTZGLFNBQUF6QyxFQUFBNEMsR0FBQSxDQUNBLElBQUEwRCxFQUNBLElBQUFBLEVBQUEsRUFBaUJBLEVBQUFhLEdBQ2pCdkssRUFBQTZGLFNBQUExRCxVQUFBdUgsR0FBQTFELEdBRGlDMEQsS0FHakNBLElBQUFhLEdBQUFuSCxFQUFBNUMsS0FBQXdGLElBRUEsT0FBQTVDLEdBS0FwRCxFQUFBOEosV0FBQWxILEVBQUEsU0FBQWtHLEVBQUE3RixHQUVBLE9BREFBLEVBQUFrRyxFQUFBbEcsR0FBQSxNQUNBakQsRUFBQW9GLE9BQUEwRCxFQUFBLFNBQUFqSCxHQUNBLE9BQUE3QixFQUFBNkYsU0FBQTVDLEVBQUFwQixPQU1BN0IsRUFBQXdLLE1BQUEsU0FBQTFCLEdBSUEsSUFIQSxJQUFBaEcsRUFBQWdHLEdBQUE5SSxFQUFBZ0QsSUFBQThGLEVBQUFqRixHQUFBZixRQUFBLEVBQ0FNLEVBQUFsRCxNQUFBNEMsR0FFQWYsRUFBQSxFQUF1QkEsRUFBQWUsRUFBZ0JmLElBQ3ZDcUIsRUFBQXJCLEdBQUEvQixFQUFBd0csTUFBQXNDLEVBQUEvRyxHQUVBLE9BQUFxQixHQUtBcEQsRUFBQXlLLElBQUE3SCxFQUFBNUMsRUFBQXdLLE9BS0F4SyxFQUFBMEssT0FBQSxTQUFBcEYsRUFBQWEsR0FFQSxJQURBLElBQUEvQyxFQUFBLEdBQ0FNLEVBQUEsRUFBQVosRUFBQWUsRUFBQXlCLEdBQTZDNUIsRUFBQVosRUFBWVksSUFDekR5QyxFQUNBL0MsRUFBQWtDLEVBQUE1QixJQUFBeUMsRUFBQXpDLEdBRUFOLEVBQUFrQyxFQUFBNUIsR0FBQSxJQUFBNEIsRUFBQTVCLEdBQUEsR0FHQSxPQUFBTixHQUlBLElBQUF1SCxFQUFBLFNBQUFyRyxHQUNBLGdCQUFBd0UsRUFBQTdELEVBQUF0RCxHQUNBc0QsRUFBQTdDLEVBQUE2QyxFQUFBdEQsR0FHQSxJQUZBLElBQUFtQixFQUFBZSxFQUFBaUYsR0FDQS9HLEVBQUF1QyxFQUFBLElBQUF4QixFQUFBLEVBQ1lmLEdBQUEsR0FBQUEsRUFBQWUsRUFBOEJmLEdBQUF1QyxFQUMxQyxHQUFBVyxFQUFBNkQsRUFBQS9HLEtBQUErRyxHQUFBLE9BQUEvRyxFQUVBLFdBS0EvQixFQUFBa0YsVUFBQXlGLEVBQUEsR0FDQTNLLEVBQUE0SyxjQUFBRCxHQUFBLEdBSUEzSyxFQUFBNkssWUFBQSxTQUFBL0IsRUFBQTNILEVBQUFrQixFQUFBVixHQUlBLElBRkEsSUFBQUUsR0FEQVEsRUFBQUQsRUFBQUMsRUFBQVYsRUFBQSxJQUNBUixHQUNBMkosRUFBQSxFQUFBQyxFQUFBbEgsRUFBQWlGLEdBQ0FnQyxFQUFBQyxHQUFBLENBQ0EsSUFBQUMsRUFBQWpJLEtBQUFrSSxPQUFBSCxFQUFBQyxHQUFBLEdBQ0ExSSxFQUFBeUcsRUFBQWtDLElBQUFuSixFQUFBaUosRUFBQUUsRUFBQSxFQUFzREQsRUFBQUMsRUFFdEQsT0FBQUYsR0FJQSxJQUFBSSxFQUFBLFNBQUE1RyxFQUFBNkcsRUFBQU4sR0FDQSxnQkFBQS9CLEVBQUE5QyxFQUFBd0QsR0FDQSxJQUFBOUYsRUFBQSxFQUFBWixFQUFBZSxFQUFBaUYsR0FDQSxvQkFBQVUsRUFDQWxGLEVBQUEsRUFDQVosRUFBQThGLEdBQUEsRUFBQUEsRUFBQXpHLEtBQUFDLElBQUF3RyxFQUFBMUcsRUFBQVksR0FFQVosRUFBQTBHLEdBQUEsRUFBQXpHLEtBQUFnRSxJQUFBeUMsRUFBQSxFQUFBMUcsR0FBQTBHLEVBQUExRyxFQUFBLE9BRU8sR0FBQStILEdBQUFyQixHQUFBMUcsRUFFUCxPQUFBZ0csRUFEQVUsRUFBQXFCLEVBQUEvQixFQUFBOUMsTUFDQUEsRUFBQXdELEdBQUEsRUFFQSxHQUFBeEQsS0FFQSxPQURBd0QsRUFBQTJCLEVBQUExSyxFQUFBcUIsS0FBQWdILEVBQUFwRixFQUFBWixHQUFBOUMsRUFBQW9MLFNBQ0EsRUFBQTVCLEVBQUE5RixHQUFBLEVBRUEsSUFBQThGLEVBQUFsRixFQUFBLEVBQUFaLEVBQUFaLEVBQUEsRUFBMEMwRyxHQUFBLEdBQUFBLEVBQUExRyxFQUEwQjBHLEdBQUFsRixFQUNwRSxHQUFBd0UsRUFBQVUsS0FBQXhELEVBQUEsT0FBQXdELEVBRUEsV0FRQXhKLEVBQUFvRyxRQUFBOEUsRUFBQSxFQUFBbEwsRUFBQWtGLFVBQUFsRixFQUFBNkssYUFDQTdLLEVBQUFxTCxZQUFBSCxHQUFBLEVBQUFsTCxFQUFBNEssZUFLQTVLLEVBQUFzTCxNQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsTUFBQUQsSUFDQUEsRUFBQUQsR0FBQSxFQUNBQSxFQUFBLEdBRUFFLElBQ0FBLEVBQUFELEVBQUFELEdBQUEsS0FNQSxJQUhBLElBQUF6SSxFQUFBQyxLQUFBQyxJQUFBRCxLQUFBMkksTUFBQUYsRUFBQUQsR0FBQUUsR0FBQSxHQUNBSCxFQUFBcEwsTUFBQTRDLEdBRUEwRyxFQUFBLEVBQXFCQSxFQUFBMUcsRUFBYzBHLElBQUErQixHQUFBRSxFQUNuQ0gsRUFBQTlCLEdBQUErQixFQUdBLE9BQUFELEdBS0F0TCxFQUFBMkwsTUFBQSxTQUFBN0MsRUFBQThDLEdBQ0EsU0FBQUEsS0FBQSxXQUdBLElBRkEsSUFBQXhJLEVBQUEsR0FDQU0sRUFBQSxFQUFBWixFQUFBZ0csRUFBQWhHLE9BQ0FZLEVBQUFaLEdBQ0FNLEVBQUE1QyxLQUFBQyxFQUFBcUIsS0FBQWdILEVBQUFwRixLQUFBa0ksSUFFQSxPQUFBeEksR0FRQSxJQUFBeUksRUFBQSxTQUFBQyxFQUFBQyxFQUFBcEssRUFBQXFLLEVBQUE5SSxHQUNBLEtBQUE4SSxhQUFBRCxHQUFBLE9BQUFELEVBQUE1SixNQUFBUCxFQUFBdUIsR0FDQSxJQUFBckQsRUFBQXNELEVBQUEySSxFQUFBM0wsV0FDQWlELEVBQUEwSSxFQUFBNUosTUFBQXJDLEVBQUFxRCxHQUNBLE9BQUFsRCxFQUFBd0MsU0FBQVksS0FDQXZELEdBTUFHLEVBQUFpTSxLQUFBckosRUFBQSxTQUFBbEIsRUFBQUMsRUFBQXVCLEdBQ0EsSUFBQWxELEVBQUF1QyxXQUFBYixHQUFBLFVBQUF3SyxVQUFBLHFDQUNBLElBQUFDLEVBQUF2SixFQUFBLFNBQUF3SixHQUNBLE9BQUFQLEVBQUFuSyxFQUFBeUssRUFBQXhLLEVBQUE3QixLQUFBb0QsRUFBQW1KLE9BQUFELE1BRUEsT0FBQUQsSUFPQW5NLEVBQUFzTSxRQUFBMUosRUFBQSxTQUFBbEIsRUFBQTZLLEdBQ0EsSUFBQUMsRUFBQXhNLEVBQUFzTSxRQUFBRSxZQUNBTCxFQUFBLFdBR0EsSUFGQSxJQUFBTSxFQUFBLEVBQUEzSixFQUFBeUosRUFBQXpKLE9BQ0FJLEVBQUFoRCxNQUFBNEMsR0FDQVksRUFBQSxFQUFxQkEsRUFBQVosRUFBWVksSUFDakNSLEVBQUFRLEdBQUE2SSxFQUFBN0ksS0FBQThJLEVBQUFySyxVQUFBc0ssS0FBQUYsRUFBQTdJLEdBRUEsS0FBQStJLEVBQUF0SyxVQUFBVyxRQUFBSSxFQUFBMUMsS0FBQTJCLFVBQUFzSyxNQUNBLE9BQUFaLEVBQUFuSyxFQUFBeUssRUFBQXJNLFVBQUFvRCxJQUVBLE9BQUFpSixJQUdBbk0sRUFBQXNNLFFBQUFFLFlBQUF4TSxFQUtBQSxFQUFBME0sUUFBQTlKLEVBQUEsU0FBQXpCLEVBQUFKLEdBRUEsSUFBQWdCLEdBREFoQixFQUFBb0ksRUFBQXBJLEdBQUEsT0FDQStCLE9BQ0EsR0FBQWYsRUFBQSxZQUFBNEssTUFBQSx5Q0FDQSxLQUFBNUssS0FBQSxDQUNBLElBQUF1QixFQUFBdkMsRUFBQWdCLEdBQ0FaLEVBQUFtQyxHQUFBdEQsRUFBQWlNLEtBQUE5SyxFQUFBbUMsR0FBQW5DLE1BS0FuQixFQUFBNE0sUUFBQSxTQUFBbEwsRUFBQW1MLEdBQ0EsSUFBQUQsRUFBQSxTQUFBdEosR0FDQSxJQUFBd0osRUFBQUYsRUFBQUUsTUFDQUMsRUFBQSxJQUFBRixJQUFBM0ssTUFBQXBDLEtBQUFxQyxXQUFBbUIsR0FFQSxPQURBQyxFQUFBdUosRUFBQUMsS0FBQUQsRUFBQUMsR0FBQXJMLEVBQUFRLE1BQUFwQyxLQUFBcUMsWUFDQTJLLEVBQUFDLElBR0EsT0FEQUgsRUFBQUUsTUFBQSxHQUNBRixHQUtBNU0sRUFBQWdOLE1BQUFwSyxFQUFBLFNBQUFsQixFQUFBdUwsRUFBQS9KLEdBQ0EsT0FBQWdLLFdBQUEsV0FDQSxPQUFBeEwsRUFBQVEsTUFBQSxLQUFBZ0IsSUFDSytKLEtBS0xqTixFQUFBbU4sTUFBQW5OLEVBQUFzTSxRQUFBdE0sRUFBQWdOLE1BQUFoTixFQUFBLEdBT0FBLEVBQUFvTixTQUFBLFNBQUExTCxFQUFBdUwsRUFBQUksR0FDQSxJQUFBQyxFQUFBM0wsRUFBQXVCLEVBQUFFLEVBQ0FtSyxFQUFBLEVBQ0FGLE1BQUEsSUFFQSxJQUFBRyxFQUFBLFdBQ0FELEdBQUEsSUFBQUYsRUFBQUksUUFBQSxFQUFBek4sRUFBQTBOLE1BQ0FKLEVBQUEsS0FDQWxLLEVBQUExQixFQUFBUSxNQUFBUCxFQUFBdUIsR0FDQW9LLElBQUEzTCxFQUFBdUIsRUFBQSxPQUdBeUssRUFBQSxXQUNBLElBQUFELEVBQUExTixFQUFBME4sTUFDQUgsSUFBQSxJQUFBRixFQUFBSSxVQUFBRixFQUFBRyxHQUNBLElBQUFFLEVBQUFYLEdBQUFTLEVBQUFILEdBY0EsT0FiQTVMLEVBQUE3QixLQUNBb0QsRUFBQWYsVUFDQXlMLEdBQUEsR0FBQUEsRUFBQVgsR0FDQUssSUFDQU8sYUFBQVAsR0FDQUEsRUFBQSxNQUVBQyxFQUFBRyxFQUNBdEssRUFBQTFCLEVBQUFRLE1BQUFQLEVBQUF1QixHQUNBb0ssSUFBQTNMLEVBQUF1QixFQUFBLE9BQ09vSyxJQUFBLElBQUFELEVBQUFTLFdBQ1BSLEVBQUFKLFdBQUFNLEVBQUFJLElBRUF4SyxHQVNBLE9BTkF1SyxFQUFBSSxPQUFBLFdBQ0FGLGFBQUFQLEdBQ0FDLEVBQUEsRUFDQUQsRUFBQTNMLEVBQUF1QixFQUFBLE1BR0F5SyxHQU9BM04sRUFBQWdPLFNBQUEsU0FBQXRNLEVBQUF1TCxFQUFBZ0IsR0FDQSxJQUFBWCxFQUFBbEssRUFFQW9LLEVBQUEsU0FBQTdMLEVBQUF1QixHQUNBb0ssRUFBQSxLQUNBcEssSUFBQUUsRUFBQTFCLEVBQUFRLE1BQUFQLEVBQUF1QixLQUdBZ0wsRUFBQXRMLEVBQUEsU0FBQU0sR0FFQSxHQURBb0ssR0FBQU8sYUFBQVAsR0FDQVcsRUFBQSxDQUNBLElBQUFFLEdBQUFiLEVBQ0FBLEVBQUFKLFdBQUFNLEVBQUFQLEdBQ0FrQixJQUFBL0ssRUFBQTFCLEVBQUFRLE1BQUFwQyxLQUFBb0QsU0FFQW9LLEVBQUF0TixFQUFBZ04sTUFBQVEsRUFBQVAsRUFBQW5OLEtBQUFvRCxHQUdBLE9BQUFFLElBUUEsT0FMQThLLEVBQUFILE9BQUEsV0FDQUYsYUFBQVAsR0FDQUEsRUFBQSxNQUdBWSxHQU1BbE8sRUFBQW9PLEtBQUEsU0FBQTFNLEVBQUEyTSxHQUNBLE9BQUFyTyxFQUFBc00sUUFBQStCLEVBQUEzTSxJQUlBMUIsRUFBQXdGLE9BQUEsU0FBQVAsR0FDQSxrQkFDQSxPQUFBQSxFQUFBL0MsTUFBQXBDLEtBQUFxQyxhQU1BbkMsRUFBQXNPLFFBQUEsV0FDQSxJQUFBcEwsRUFBQWYsVUFDQW9KLEVBQUFySSxFQUFBSixPQUFBLEVBQ0Esa0JBR0EsSUFGQSxJQUFBWSxFQUFBNkgsRUFDQW5JLEVBQUFGLEVBQUFxSSxHQUFBckosTUFBQXBDLEtBQUFxQyxXQUNBdUIsS0FBQU4sRUFBQUYsRUFBQVEsR0FBQTVCLEtBQUFoQyxLQUFBc0QsR0FDQSxPQUFBQSxJQUtBcEQsRUFBQXVPLE1BQUEsU0FBQUMsRUFBQTlNLEdBQ0Esa0JBQ0EsS0FBQThNLEVBQUEsRUFDQSxPQUFBOU0sRUFBQVEsTUFBQXBDLEtBQUFxQyxhQU1BbkMsRUFBQXlPLE9BQUEsU0FBQUQsRUFBQTlNLEdBQ0EsSUFBQTZDLEVBQ0Esa0JBS0EsUUFKQWlLLEVBQUEsSUFDQWpLLEVBQUE3QyxFQUFBUSxNQUFBcEMsS0FBQXFDLFlBRUFxTSxHQUFBLElBQUE5TSxFQUFBLE1BQ0E2QyxJQU1BdkUsRUFBQTBPLEtBQUExTyxFQUFBc00sUUFBQXRNLEVBQUF5TyxPQUFBLEdBRUF6TyxFQUFBNEMsZ0JBTUEsSUFBQStMLEdBQUEsQ0FBcUJqTyxTQUFBLE1BQWVrTyxxQkFBQSxZQUNwQ0MsRUFBQSxzQ0FDQSwwREFFQUMsRUFBQSxTQUFBM04sRUFBQUosR0FDQSxJQUFBZ08sRUFBQUYsRUFBQS9MLE9BQ0FrTSxFQUFBN04sRUFBQTZOLFlBQ0FDLEVBQUFqUCxFQUFBdUMsV0FBQXlNLE1BQUE3TyxXQUFBQyxFQUdBOE8sRUFBQSxjQUdBLElBRkEzTCxFQUFBcEMsRUFBQStOLEtBQUFsUCxFQUFBNkYsU0FBQTlFLEVBQUFtTyxJQUFBbk8sRUFBQVAsS0FBQTBPLEdBRUFILE1BQ0FHLEVBQUFMLEVBQUFFLE1BQ0E1TixLQUFBK04sS0FBQUQsRUFBQUMsS0FBQWxQLEVBQUE2RixTQUFBOUUsRUFBQW1PLElBQ0FuTyxFQUFBUCxLQUFBME8sSUFPQWxQLEVBQUFlLEtBQUEsU0FBQUksR0FDQSxJQUFBbkIsRUFBQXdDLFNBQUFyQixHQUFBLFNBQ0EsR0FBQUwsRUFBQSxPQUFBQSxFQUFBSyxHQUNBLElBQUFKLEVBQUEsR0FDQSxRQUFBdUMsS0FBQW5DLEVBQUFvQyxFQUFBcEMsRUFBQW1DLElBQUF2QyxFQUFBUCxLQUFBOEMsR0FHQSxPQURBcUwsR0FBQUcsRUFBQTNOLEVBQUFKLEdBQ0FBLEdBSUFmLEVBQUFtUCxRQUFBLFNBQUFoTyxHQUNBLElBQUFuQixFQUFBd0MsU0FBQXJCLEdBQUEsU0FDQSxJQUFBSixFQUFBLEdBQ0EsUUFBQXVDLEtBQUFuQyxFQUFBSixFQUFBUCxLQUFBOEMsR0FHQSxPQURBcUwsR0FBQUcsRUFBQTNOLEVBQUFKLEdBQ0FBLEdBSUFmLEVBQUFtRyxPQUFBLFNBQUFoRixHQUlBLElBSEEsSUFBQUosRUFBQWYsRUFBQWUsS0FBQUksR0FDQTJCLEVBQUEvQixFQUFBK0IsT0FDQXFELEVBQUFqRyxNQUFBNEMsR0FDQVksRUFBQSxFQUFtQkEsRUFBQVosRUFBWVksSUFDL0J5QyxFQUFBekMsR0FBQXZDLEVBQUFKLEVBQUEyQyxJQUVBLE9BQUF5QyxHQUtBbkcsRUFBQW9QLFVBQUEsU0FBQWpPLEVBQUFrQixFQUFBVixHQUNBVSxFQUFBRCxFQUFBQyxFQUFBVixHQUlBLElBSEEsSUFBQVosRUFBQWYsRUFBQWUsS0FBQUksR0FDQTJCLEVBQUEvQixFQUFBK0IsT0FDQXFCLEVBQUEsR0FDQXBDLEVBQUEsRUFBdUJBLEVBQUFlLEVBQWdCZixJQUFBLENBQ3ZDLElBQUFxQyxFQUFBckQsRUFBQWdCLEdBQ0FvQyxFQUFBQyxHQUFBL0IsRUFBQWxCLEVBQUFpRCxLQUFBakQsR0FFQSxPQUFBZ0QsR0FLQW5FLEVBQUFxUCxNQUFBLFNBQUFsTyxHQUlBLElBSEEsSUFBQUosRUFBQWYsRUFBQWUsS0FBQUksR0FDQTJCLEVBQUEvQixFQUFBK0IsT0FDQXVNLEVBQUFuUCxNQUFBNEMsR0FDQVksRUFBQSxFQUFtQkEsRUFBQVosRUFBWVksSUFDL0IyTCxFQUFBM0wsR0FBQSxDQUFBM0MsRUFBQTJDLEdBQUF2QyxFQUFBSixFQUFBMkMsS0FFQSxPQUFBMkwsR0FJQXJQLEVBQUFzUCxPQUFBLFNBQUFuTyxHQUdBLElBRkEsSUFBQWlDLEVBQUEsR0FDQXJDLEVBQUFmLEVBQUFlLEtBQUFJLEdBQ0F1QyxFQUFBLEVBQUFaLEVBQUEvQixFQUFBK0IsT0FBeUNZLEVBQUFaLEVBQVlZLElBQ3JETixFQUFBakMsRUFBQUosRUFBQTJDLEtBQUEzQyxFQUFBMkMsR0FFQSxPQUFBTixHQUtBcEQsRUFBQXVQLFVBQUF2UCxFQUFBd1AsUUFBQSxTQUFBck8sR0FDQSxJQUFBc08sRUFBQSxHQUNBLFFBQUFuTSxLQUFBbkMsRUFDQW5CLEVBQUF1QyxXQUFBcEIsRUFBQW1DLEtBQUFtTSxFQUFBalAsS0FBQThDLEdBRUEsT0FBQW1NLEVBQUEvSCxRQUlBLElBQUFnSSxFQUFBLFNBQUFDLEVBQUFDLEdBQ0EsZ0JBQUF6TyxHQUNBLElBQUEyQixFQUFBWCxVQUFBVyxPQUVBLEdBREE4TSxJQUFBek8sRUFBQWQsT0FBQWMsSUFDQTJCLEVBQUEsU0FBQTNCLEVBQUEsT0FBQUEsRUFDQSxRQUFBWSxFQUFBLEVBQXlCQSxFQUFBZSxFQUFnQmYsSUFJekMsSUFIQSxJQUFBOE4sRUFBQTFOLFVBQUFKLEdBQ0FoQixFQUFBNE8sRUFBQUUsR0FDQUMsRUFBQS9PLEVBQUErQixPQUNBWSxFQUFBLEVBQXVCQSxFQUFBb00sRUFBT3BNLElBQUEsQ0FDOUIsSUFBQUosRUFBQXZDLEVBQUEyQyxHQUNBa00sUUFBQSxJQUFBek8sRUFBQW1DLEtBQUFuQyxFQUFBbUMsR0FBQXVNLEVBQUF2TSxJQUdBLE9BQUFuQyxJQUtBbkIsRUFBQStQLE9BQUFMLEVBQUExUCxFQUFBbVAsU0FJQW5QLEVBQUFnUSxVQUFBaFEsRUFBQWlRLE9BQUFQLEVBQUExUCxFQUFBZSxNQUdBZixFQUFBbUYsUUFBQSxTQUFBaEUsRUFBQThELEVBQUF0RCxHQUNBc0QsRUFBQTdDLEVBQUE2QyxFQUFBdEQsR0FFQSxJQURBLElBQUEyQixFQUFBdkMsRUFBQWYsRUFBQWUsS0FBQUksR0FDQXVDLEVBQUEsRUFBQVosRUFBQS9CLEVBQUErQixPQUF5Q1ksRUFBQVosRUFBWVksSUFFckQsR0FBQXVCLEVBQUE5RCxFQURBbUMsRUFBQXZDLEVBQUEyQyxJQUNBSixFQUFBbkMsR0FBQSxPQUFBbUMsR0FLQSxJQStFQTRNLEVBQUFDLEVBL0VBQyxFQUFBLFNBQUF2TyxFQUFBeUIsRUFBQW5DLEdBQ0EsT0FBQW1DLEtBQUFuQyxHQUlBbkIsRUFBQXFRLEtBQUF6TixFQUFBLFNBQUF6QixFQUFBSixHQUNBLElBQUFxQyxFQUFBLEdBQW1CZixFQUFBdEIsRUFBQSxHQUNuQixTQUFBSSxFQUFBLE9BQUFpQyxFQUNBcEQsRUFBQXVDLFdBQUFGLElBQ0F0QixFQUFBK0IsT0FBQSxJQUFBVCxFQUFBWixFQUFBWSxFQUFBdEIsRUFBQSxLQUNBQSxFQUFBZixFQUFBbVAsUUFBQWhPLEtBRUFrQixFQUFBK04sRUFDQXJQLEVBQUFvSSxFQUFBcEksR0FBQSxNQUNBSSxFQUFBZCxPQUFBYyxJQUVBLFFBQUF1QyxFQUFBLEVBQUFaLEVBQUEvQixFQUFBK0IsT0FBeUNZLEVBQUFaLEVBQVlZLElBQUEsQ0FDckQsSUFBQUosRUFBQXZDLEVBQUEyQyxHQUNBN0IsRUFBQVYsRUFBQW1DLEdBQ0FqQixFQUFBUixFQUFBeUIsRUFBQW5DLEtBQUFpQyxFQUFBRSxHQUFBekIsR0FFQSxPQUFBdUIsSUFJQXBELEVBQUFzUSxLQUFBMU4sRUFBQSxTQUFBekIsRUFBQUosR0FDQSxJQUFBWSxFQUFBVSxFQUFBdEIsRUFBQSxHQVVBLE9BVEFmLEVBQUF1QyxXQUFBRixJQUNBQSxFQUFBckMsRUFBQXdGLE9BQUFuRCxHQUNBdEIsRUFBQStCLE9BQUEsSUFBQW5CLEVBQUFaLEVBQUEsTUFFQUEsRUFBQWYsRUFBQWlFLElBQUFrRixFQUFBcEksR0FBQSxNQUFBd1AsUUFDQWxPLEVBQUEsU0FBQVIsRUFBQXlCLEdBQ0EsT0FBQXRELEVBQUE2RixTQUFBOUUsRUFBQXVDLEtBR0F0RCxFQUFBcVEsS0FBQWxQLEVBQUFrQixFQUFBVixLQUlBM0IsRUFBQTRQLFNBQUFGLEVBQUExUCxFQUFBbVAsU0FBQSxHQUtBblAsRUFBQWlCLE9BQUEsU0FBQWQsRUFBQXFRLEdBQ0EsSUFBQXBOLEVBQUFELEVBQUFoRCxHQUVBLE9BREFxUSxHQUFBeFEsRUFBQWdRLFVBQUE1TSxFQUFBb04sR0FDQXBOLEdBSUFwRCxFQUFBb0gsTUFBQSxTQUFBakcsR0FDQSxPQUFBbkIsRUFBQXdDLFNBQUFyQixHQUNBbkIsRUFBQWEsUUFBQU0sS0FBQVYsUUFBQVQsRUFBQStQLE9BQUEsR0FBcUQ1TyxHQURyREEsR0FPQW5CLEVBQUF5USxJQUFBLFNBQUF0UCxFQUFBdVAsR0FFQSxPQURBQSxFQUFBdlAsR0FDQUEsR0FJQW5CLEVBQUEyUSxRQUFBLFNBQUFqRyxFQUFBaEUsR0FDQSxJQUFBM0YsRUFBQWYsRUFBQWUsS0FBQTJGLEdBQUE1RCxFQUFBL0IsRUFBQStCLE9BQ0EsU0FBQTRILEVBQUEsT0FBQTVILEVBRUEsSUFEQSxJQUFBM0IsRUFBQWQsT0FBQXFLLEdBQ0FoSCxFQUFBLEVBQW1CQSxFQUFBWixFQUFZWSxJQUFBLENBQy9CLElBQUFKLEVBQUF2QyxFQUFBMkMsR0FDQSxHQUFBZ0QsRUFBQXBELEtBQUFuQyxFQUFBbUMsV0FBQW5DLEdBQUEsU0FFQSxVQU1BK08sRUFBQSxTQUFBckksRUFBQUMsRUFBQThJLEVBQUFDLEdBR0EsR0FBQWhKLElBQUFDLEVBQUEsV0FBQUQsR0FBQSxFQUFBQSxHQUFBLEVBQUFDLEVBRUEsU0FBQUQsR0FBQSxNQUFBQyxFQUFBLFNBRUEsR0FBQUQsS0FBQSxPQUFBQyxLQUVBLElBQUFnSixTQUFBakosRUFDQSxvQkFBQWlKLEdBQUEsV0FBQUEsR0FBQSxpQkFBQWhKLElBQ0FxSSxFQUFBdEksRUFBQUMsRUFBQThJLEVBQUFDLElBSUFWLEVBQUEsU0FBQXRJLEVBQUFDLEVBQUE4SSxFQUFBQyxHQUVBaEosYUFBQTdILElBQUE2SCxJQUFBekcsVUFDQTBHLGFBQUE5SCxJQUFBOEgsSUFBQTFHLFVBRUEsSUFBQTJQLEVBQUFyUSxFQUFBb0IsS0FBQStGLEdBQ0EsR0FBQWtKLElBQUFyUSxFQUFBb0IsS0FBQWdHLEdBQUEsU0FDQSxPQUFBaUosR0FFQSxzQkFFQSxzQkFHQSxTQUFBbEosR0FBQSxHQUFBQyxFQUNBLHNCQUdBLE9BQUFELE9BQUFDLE1BRUEsSUFBQUQsRUFBQSxHQUFBQSxHQUFBLEVBQUFDLEdBQUFELElBQUFDLEVBQ0Esb0JBQ0EsdUJBSUEsT0FBQUQsSUFBQUMsRUFDQSxzQkFDQSxPQUFBeEgsRUFBQTBRLFFBQUFsUCxLQUFBK0YsS0FBQXZILEVBQUEwUSxRQUFBbFAsS0FBQWdHLEdBR0EsSUFBQW1KLEVBQUEsbUJBQUFGLEVBQ0EsSUFBQUUsRUFBQSxDQUNBLG9CQUFBcEosR0FBQSxpQkFBQUMsRUFBQSxTQUlBLElBQUFvSixFQUFBckosRUFBQW1ILFlBQUFtQyxFQUFBckosRUFBQWtILFlBQ0EsR0FBQWtDLElBQUFDLEtBQUFuUixFQUFBdUMsV0FBQTJPLG9CQUNBbFIsRUFBQXVDLFdBQUE0TyxxQkFDQSxnQkFBQXRKLEdBQUEsZ0JBQUFDLEVBQ0EsU0FTQStJLEtBQUEsR0FFQSxJQURBLElBQUEvTixHQUZBOE4sS0FBQSxJQUVBOU4sT0FDQUEsS0FHQSxHQUFBOE4sRUFBQTlOLEtBQUErRSxFQUFBLE9BQUFnSixFQUFBL04sS0FBQWdGLEVBUUEsR0FKQThJLEVBQUFwUSxLQUFBcUgsR0FDQWdKLEVBQUFyUSxLQUFBc0gsR0FHQW1KLEVBQUEsQ0FHQSxJQURBbk8sRUFBQStFLEVBQUEvRSxVQUNBZ0YsRUFBQWhGLE9BQUEsU0FFQSxLQUFBQSxLQUNBLElBQUFvTixFQUFBckksRUFBQS9FLEdBQUFnRixFQUFBaEYsR0FBQThOLEVBQUFDLEdBQUEsYUFFSyxDQUVMLElBQUF2TixFQUFBdkMsRUFBQWYsRUFBQWUsS0FBQThHLEdBR0EsR0FGQS9FLEVBQUEvQixFQUFBK0IsT0FFQTlDLEVBQUFlLEtBQUErRyxHQUFBaEYsV0FBQSxTQUNBLEtBQUFBLEtBR0EsR0FEQVEsRUFBQXZDLEVBQUErQixJQUNBUyxFQUFBdUUsRUFBQXhFLEtBQUE0TSxFQUFBckksRUFBQXZFLEdBQUF3RSxFQUFBeEUsR0FBQXNOLEVBQUFDLEdBQUEsU0FNQSxPQUZBRCxFQUFBUSxNQUNBUCxFQUFBTyxPQUNBLEdBSUFwUixFQUFBcVIsUUFBQSxTQUFBeEosRUFBQUMsR0FDQSxPQUFBb0ksRUFBQXJJLEVBQUFDLElBS0E5SCxFQUFBc1IsUUFBQSxTQUFBblEsR0FDQSxhQUFBQSxJQUNBMkMsRUFBQTNDLEtBQUFuQixFQUFBYSxRQUFBTSxJQUFBbkIsRUFBQXVJLFNBQUFwSCxJQUFBbkIsRUFBQXlKLFlBQUF0SSxJQUFBLElBQUFBLEVBQUEyQixPQUNBLElBQUE5QyxFQUFBZSxLQUFBSSxHQUFBMkIsU0FJQTlDLEVBQUF1UixVQUFBLFNBQUFwUSxHQUNBLFNBQUFBLEdBQUEsSUFBQUEsRUFBQUcsV0FLQXRCLEVBQUFhLFFBQUFELEdBQUEsU0FBQU8sR0FDQSx5QkFBQVQsRUFBQW9CLEtBQUFYLElBSUFuQixFQUFBd0MsU0FBQSxTQUFBckIsR0FDQSxJQUFBMlAsU0FBQTNQLEVBQ0EsbUJBQUEyUCxHQUFBLFdBQUFBLEtBQUEzUCxHQUlBbkIsRUFBQStELEtBQUEscUhBQUF5TixHQUNBeFIsRUFBQSxLQUFBd1IsR0FBQSxTQUFBclEsR0FDQSxPQUFBVCxFQUFBb0IsS0FBQVgsS0FBQSxXQUFBcVEsRUFBQSxPQU1BeFIsRUFBQXlKLFlBQUF0SCxhQUNBbkMsRUFBQXlKLFlBQUEsU0FBQXRJLEdBQ0EsT0FBQW9DLEVBQUFwQyxFQUFBLFlBTUEsSUFBQXNRLEVBQUE3UixFQUFBOFIsVUFBQTlSLEVBQUE4UixTQUFBQyxXQUM4QixpQkFBQUMsV0FBQSxtQkFBQUgsSUFDOUJ6UixFQUFBdUMsV0FBQSxTQUFBcEIsR0FDQSx5QkFBQUEsSUFBQSxJQUtBbkIsRUFBQTZSLFNBQUEsU0FBQTFRLEdBQ0EsT0FBQW5CLEVBQUE4UixTQUFBM1EsSUFBQTBRLFNBQUExUSxLQUFBaUssTUFBQTJHLFdBQUE1USxLQUlBbkIsRUFBQW9MLE1BQUEsU0FBQWpLLEdBQ0EsT0FBQW5CLEVBQUFnUyxTQUFBN1EsSUFBQWlLLE1BQUFqSyxJQUlBbkIsRUFBQWtLLFVBQUEsU0FBQS9JLEdBQ0EsV0FBQUEsSUFBQSxJQUFBQSxHQUFBLHFCQUFBVCxFQUFBb0IsS0FBQVgsSUFJQW5CLEVBQUFpUyxPQUFBLFNBQUE5USxHQUNBLGNBQUFBLEdBSUFuQixFQUFBa1MsWUFBQSxTQUFBL1EsR0FDQSxnQkFBQUEsR0FLQW5CLEVBQUF1RCxJQUFBLFNBQUFwQyxFQUFBcUMsR0FDQSxJQUFBeEQsRUFBQWEsUUFBQTJDLEdBQ0EsT0FBQUQsRUFBQXBDLEVBQUFxQyxHQUdBLElBREEsSUFBQVYsRUFBQVUsRUFBQVYsT0FDQVksRUFBQSxFQUFtQkEsRUFBQVosRUFBWVksSUFBQSxDQUMvQixJQUFBSixFQUFBRSxFQUFBRSxHQUNBLFNBQUF2QyxJQUFBUixFQUFBbUIsS0FBQVgsRUFBQW1DLEdBQ0EsU0FFQW5DLElBQUFtQyxHQUVBLFFBQUFSLEdBUUE5QyxFQUFBbVMsV0FBQSxXQUVBLE9BREF2UyxFQUFBSSxFQUFBRCxFQUNBRCxNQUlBRSxFQUFBc0MsU0FBQSxTQUFBVCxHQUNBLE9BQUFBLEdBSUE3QixFQUFBb1MsU0FBQSxTQUFBdlEsR0FDQSxrQkFDQSxPQUFBQSxJQUlBN0IsRUFBQXFTLEtBQUEsYUFJQXJTLEVBQUEwQyxTQUFBLFNBQUFjLEdBQ0EsT0FBQXhELEVBQUFhLFFBQUEyQyxHQUdBLFNBQUFyQyxHQUNBLE9BQUFzQyxFQUFBdEMsRUFBQXFDLElBSEFILEVBQUFHLElBUUF4RCxFQUFBc1MsV0FBQSxTQUFBblIsR0FDQSxhQUFBQSxFQUNBLGFBRUEsU0FBQXFDLEdBQ0EsT0FBQXhELEVBQUFhLFFBQUEyQyxHQUFBQyxFQUFBdEMsRUFBQXFDLEdBQUFyQyxFQUFBcUMsS0FNQXhELEVBQUF5QyxRQUFBekMsRUFBQXVTLFFBQUEsU0FBQTdMLEdBRUEsT0FEQUEsRUFBQTFHLEVBQUFnUSxVQUFBLEdBQTBCdEosR0FDMUIsU0FBQXZGLEdBQ0EsT0FBQW5CLEVBQUEyUSxRQUFBeFAsRUFBQXVGLEtBS0ExRyxFQUFBd08sTUFBQSxTQUFBdEgsRUFBQTdFLEVBQUFWLEdBQ0EsSUFBQTZRLEVBQUF0UyxNQUFBNkMsS0FBQUMsSUFBQSxFQUFBa0UsSUFDQTdFLEVBQUFaLEVBQUFZLEVBQUFWLEVBQUEsR0FDQSxRQUFBK0IsRUFBQSxFQUFtQkEsRUFBQXdELEVBQU94RCxJQUFBOE8sRUFBQTlPLEdBQUFyQixFQUFBcUIsR0FDMUIsT0FBQThPLEdBSUF4UyxFQUFBbUgsT0FBQSxTQUFBSixFQUFBL0QsR0FLQSxPQUpBLE1BQUFBLElBQ0FBLEVBQUErRCxFQUNBQSxFQUFBLEdBRUFBLEVBQUFoRSxLQUFBa0ksTUFBQWxJLEtBQUFvRSxVQUFBbkUsRUFBQStELEVBQUEsS0FJQS9HLEVBQUEwTixJQUFBK0UsS0FBQS9FLEtBQUEsV0FDQSxXQUFBK0UsTUFBQUMsV0FJQSxJQUFBQyxFQUFBLENBQ0FDLElBQUEsUUFDQUMsSUFBQSxPQUNBQyxJQUFBLE9BQ0FDLElBQUEsU0FDQUMsSUFBQSxTQUNBQyxJQUFBLFVBRUFDLEVBQUFsVCxFQUFBc1AsT0FBQXFELEdBR0FRLEVBQUEsU0FBQWxQLEdBQ0EsSUFBQW1QLEVBQUEsU0FBQTVLLEdBQ0EsT0FBQXZFLEVBQUF1RSxJQUdBcUgsRUFBQSxNQUFBN1AsRUFBQWUsS0FBQWtELEdBQUFvUCxLQUFBLFNBQ0FDLEVBQUFDLE9BQUExRCxHQUNBMkQsRUFBQUQsT0FBQTFELEVBQUEsS0FDQSxnQkFBQTRELEdBRUEsT0FEQUEsRUFBQSxNQUFBQSxFQUFBLE1BQUFBLEVBQ0FILEVBQUFJLEtBQUFELEtBQUFFLFFBQUFILEVBQUFKLEdBQUFLLElBR0F6VCxFQUFBNFQsT0FBQVQsRUFBQVIsR0FDQTNTLEVBQUE2VCxTQUFBVixFQUFBRCxHQUtBbFQsRUFBQW9ELE9BQUEsU0FBQWpDLEVBQUFxQyxFQUFBc1EsR0FDQTlULEVBQUFhLFFBQUEyQyxPQUFBLENBQUFBLElBQ0EsSUFBQVYsRUFBQVUsRUFBQVYsT0FDQSxJQUFBQSxFQUNBLE9BQUE5QyxFQUFBdUMsV0FBQXVSLEtBQUFoUyxLQUFBWCxHQUFBMlMsRUFFQSxRQUFBcFEsRUFBQSxFQUFtQkEsRUFBQVosRUFBWVksSUFBQSxDQUMvQixJQUFBd0wsRUFBQSxNQUFBL04sT0FBQSxFQUFBQSxFQUFBcUMsRUFBQUUsU0FDQSxJQUFBd0wsSUFDQUEsRUFBQTRFLEVBQ0FwUSxFQUFBWixHQUVBM0IsRUFBQW5CLEVBQUF1QyxXQUFBMk0sS0FBQXBOLEtBQUFYLEdBQUErTixFQUVBLE9BQUEvTixHQUtBLElBQUE0UyxFQUFBLEVBQ0EvVCxFQUFBZ1UsU0FBQSxTQUFBQyxHQUNBLElBQUFDLElBQUFILEVBQUEsR0FDQSxPQUFBRSxJQUFBQyxLQUtBbFUsRUFBQW1VLGlCQUFBLENBQ0FDLFNBQUEsa0JBQ0FDLFlBQUEsbUJBQ0FULE9BQUEsb0JBTUEsSUFBQVUsRUFBQSxPQUlBQyxFQUFBLENBQ0F2QixJQUFBLElBQ0F3QixLQUFBLEtBQ0FDLEtBQUEsSUFDQUMsS0FBQSxJQUNBQyxTQUFBLFFBQ0FDLFNBQUEsU0FHQUMsRUFBQSw0QkFFQUMsRUFBQSxTQUFBdE0sR0FDQSxXQUFBK0wsRUFBQS9MLElBT0F4SSxFQUFBK1UsU0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxJQUNBRCxHQUFBQyxJQUFBRCxFQUFBQyxHQUNBRCxFQUFBalYsRUFBQTRQLFNBQUEsR0FBNEJxRixFQUFBalYsRUFBQW1VLGtCQUc1QixJQWlDQWdCLEVBakNBMVMsRUFBQThRLE9BQUEsRUFDQTBCLEVBQUFyQixRQUFBVSxHQUFBekUsUUFDQW9GLEVBQUFaLGFBQUFDLEdBQUF6RSxRQUNBb0YsRUFBQWIsVUFBQUUsR0FBQXpFLFFBQ0F3RCxLQUFBLGVBR0F0UixFQUFBLEVBQ0E4TixFQUFBLFNBQ0FtRixFQUFBckIsUUFBQWxSLEVBQUEsU0FBQStGLEVBQUFvTCxFQUFBUyxFQUFBRCxFQUFBZ0IsR0FhQSxPQVpBdkYsR0FBQW1GLEVBQUF2VSxNQUFBc0IsRUFBQXFULEdBQUF6QixRQUFBa0IsRUFBQUMsR0FDQS9TLEVBQUFxVCxFQUFBNU0sRUFBQTFGLE9BRUE4USxFQUNBL0QsR0FBQSxjQUFBK0QsRUFBQSxpQ0FDT1MsRUFDUHhFLEdBQUEsY0FBQXdFLEVBQUEsdUJBQ09ELElBQ1B2RSxHQUFBLE9BQXFCdUUsRUFBQSxZQUlyQjVMLElBRUFxSCxHQUFBLE9BR0FvRixFQUFBSSxXQUFBeEYsRUFBQSxtQkFBb0RBLEVBQUEsT0FFcERBLEVBQUEsNEZBRUFBLEVBQUEsZ0JBR0EsSUFDQXNGLEVBQUEsSUFBQUcsU0FBQUwsRUFBQUksVUFBQSxVQUFBeEYsR0FDSyxNQUFBMEYsR0FFTCxNQURBQSxFQUFBMUYsU0FDQTBGLEVBR0EsSUFBQVIsRUFBQSxTQUFBUyxHQUNBLE9BQUFMLEVBQUFyVCxLQUFBaEMsS0FBQTBWLEVBQUF4VixJQUlBeVYsRUFBQVIsRUFBQUksVUFBQSxNQUdBLE9BRkFOLEVBQUFsRixPQUFBLFlBQUE0RixFQUFBLE9BQWtENUYsRUFBQSxJQUVsRGtGLEdBSUEvVSxFQUFBMFYsTUFBQSxTQUFBdlUsR0FDQSxJQUFBd1UsRUFBQTNWLEVBQUFtQixHQUVBLE9BREF3VSxFQUFBQyxRQUFBLEVBQ0FELEdBVUEsSUFBQUUsRUFBQSxTQUFBRixFQUFBeFUsR0FDQSxPQUFBd1UsRUFBQUMsT0FBQTVWLEVBQUFtQixHQUFBdVUsUUFBQXZVLEdBSUFuQixFQUFBOFYsTUFBQSxTQUFBM1UsR0FTQSxPQVJBbkIsRUFBQStELEtBQUEvRCxFQUFBdVAsVUFBQXBPLEdBQUEsU0FBQXFRLEdBQ0EsSUFBQTlQLEVBQUExQixFQUFBd1IsR0FBQXJRLEVBQUFxUSxHQUNBeFIsRUFBQUcsVUFBQXFSLEdBQUEsV0FDQSxJQUFBdE8sRUFBQSxDQUFBcEQsS0FBQXNCLFVBRUEsT0FEQVosRUFBQTBCLE1BQUFnQixFQUFBZixXQUNBMFQsRUFBQS9WLEtBQUE0QixFQUFBUSxNQUFBbEMsRUFBQWtELE9BR0FsRCxHQUlBQSxFQUFBOFYsTUFBQTlWLEdBR0FBLEVBQUErRCxLQUFBLG9FQUFBeU4sR0FDQSxJQUFBakwsRUFBQXRHLEVBQUF1UixHQUNBeFIsRUFBQUcsVUFBQXFSLEdBQUEsV0FDQSxJQUFBclEsRUFBQXJCLEtBQUFzQixTQUdBLE9BRkFtRixFQUFBckUsTUFBQWYsRUFBQWdCLFdBQ0EsVUFBQXFQLEdBQUEsV0FBQUEsR0FBQSxJQUFBclEsRUFBQTJCLGVBQUEzQixFQUFBLEdBQ0EwVSxFQUFBL1YsS0FBQXFCLE1BS0FuQixFQUFBK0QsS0FBQSxtQ0FBQXlOLEdBQ0EsSUFBQWpMLEVBQUF0RyxFQUFBdVIsR0FDQXhSLEVBQUFHLFVBQUFxUixHQUFBLFdBQ0EsT0FBQXFFLEVBQUEvVixLQUFBeUcsRUFBQXJFLE1BQUFwQyxLQUFBc0IsU0FBQWUsZUFLQW5DLEVBQUFHLFVBQUEwQixNQUFBLFdBQ0EsT0FBQS9CLEtBQUFzQixVQUtBcEIsRUFBQUcsVUFBQTZRLFFBQUFoUixFQUFBRyxVQUFBNFYsT0FBQS9WLEVBQUFHLFVBQUEwQixNQUVBN0IsRUFBQUcsVUFBQU8sU0FBQSxXQUNBLE9BQUE2UCxPQUFBelEsS0FBQXNCLGdCQWFLNFUsS0FGc0JyVyxFQUFBLFdBQzNCLE9BQUFLLEdBQ0trQyxNQUFBYixFQUZvQixPQUVwQjNCLEVBQUEyQixRQUFBMUIsR0FwcERMIiwiZmlsZSI6InZlbmRvcnN+YXN5bmMtdW5kZXJzY29yZS43NWY0YWI5NWY2NGVjZWNkOWY4Yi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vICAgICBVbmRlcnNjb3JlLmpzIDEuOS4xXG4vLyAgICAgaHR0cDovL3VuZGVyc2NvcmVqcy5vcmdcbi8vICAgICAoYykgMjAwOS0yMDE4IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4vLyAgICAgVW5kZXJzY29yZSBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIC8vIEJhc2VsaW5lIHNldHVwXG4gIC8vIC0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gRXN0YWJsaXNoIHRoZSByb290IG9iamVjdCwgYHdpbmRvd2AgKGBzZWxmYCkgaW4gdGhlIGJyb3dzZXIsIGBnbG9iYWxgXG4gIC8vIG9uIHRoZSBzZXJ2ZXIsIG9yIGB0aGlzYCBpbiBzb21lIHZpcnR1YWwgbWFjaGluZXMuIFdlIHVzZSBgc2VsZmBcbiAgLy8gaW5zdGVhZCBvZiBgd2luZG93YCBmb3IgYFdlYldvcmtlcmAgc3VwcG9ydC5cbiAgdmFyIHJvb3QgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmLnNlbGYgPT09IHNlbGYgJiYgc2VsZiB8fFxuICAgICAgICAgICAgdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwuZ2xvYmFsID09PSBnbG9iYWwgJiYgZ2xvYmFsIHx8XG4gICAgICAgICAgICB0aGlzIHx8XG4gICAgICAgICAgICB7fTtcblxuICAvLyBTYXZlIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYF9gIHZhcmlhYmxlLlxuICB2YXIgcHJldmlvdXNVbmRlcnNjb3JlID0gcm9vdC5fO1xuXG4gIC8vIFNhdmUgYnl0ZXMgaW4gdGhlIG1pbmlmaWVkIChidXQgbm90IGd6aXBwZWQpIHZlcnNpb246XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLCBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBTeW1ib2xQcm90byA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sLnByb3RvdHlwZSA6IG51bGw7XG5cbiAgLy8gQ3JlYXRlIHF1aWNrIHJlZmVyZW5jZSB2YXJpYWJsZXMgZm9yIHNwZWVkIGFjY2VzcyB0byBjb3JlIHByb3RvdHlwZXMuXG4gIHZhciBwdXNoID0gQXJyYXlQcm90by5wdXNoLFxuICAgICAgc2xpY2UgPSBBcnJheVByb3RvLnNsaWNlLFxuICAgICAgdG9TdHJpbmcgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICAgIGhhc093blByb3BlcnR5ID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlXG4gIC8vIGFyZSBkZWNsYXJlZCBoZXJlLlxuICB2YXIgbmF0aXZlSXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgICBuYXRpdmVLZXlzID0gT2JqZWN0LmtleXMsXG4gICAgICBuYXRpdmVDcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG4gIC8vIE5ha2VkIGZ1bmN0aW9uIHJlZmVyZW5jZSBmb3Igc3Vycm9nYXRlLXByb3RvdHlwZS1zd2FwcGluZy5cbiAgdmFyIEN0b3IgPSBmdW5jdGlvbigpe307XG5cbiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuXG4gIHZhciBfID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIF8pIHJldHVybiBvYmo7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTtcbiAgICB0aGlzLl93cmFwcGVkID0gb2JqO1xuICB9O1xuXG4gIC8vIEV4cG9ydCB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yICoqTm9kZS5qcyoqLCB3aXRoXG4gIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGZvciB0aGVpciBvbGQgbW9kdWxlIEFQSS4gSWYgd2UncmUgaW5cbiAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0LlxuICAvLyAoYG5vZGVUeXBlYCBpcyBjaGVja2VkIHRvIGVuc3VyZSB0aGF0IGBtb2R1bGVgXG4gIC8vIGFuZCBgZXhwb3J0c2AgYXJlIG5vdCBIVE1MIGVsZW1lbnRzLilcbiAgaWYgKHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmICFleHBvcnRzLm5vZGVUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gXztcbiAgICB9XG4gICAgZXhwb3J0cy5fID0gXztcbiAgfSBlbHNlIHtcbiAgICByb290Ll8gPSBfO1xuICB9XG5cbiAgLy8gQ3VycmVudCB2ZXJzaW9uLlxuICBfLlZFUlNJT04gPSAnMS45LjEnO1xuXG4gIC8vIEludGVybmFsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBlZmZpY2llbnQgKGZvciBjdXJyZW50IGVuZ2luZXMpIHZlcnNpb25cbiAgLy8gb2YgdGhlIHBhc3NlZC1pbiBjYWxsYmFjaywgdG8gYmUgcmVwZWF0ZWRseSBhcHBsaWVkIGluIG90aGVyIFVuZGVyc2NvcmVcbiAgLy8gZnVuY3Rpb25zLlxuICB2YXIgb3B0aW1pemVDYiA9IGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQsIGFyZ0NvdW50KSB7XG4gICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgcmV0dXJuIGZ1bmM7XG4gICAgc3dpdGNoIChhcmdDb3VudCA9PSBudWxsID8gMyA6IGFyZ0NvdW50KSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgICAvLyBUaGUgMi1hcmd1bWVudCBjYXNlIGlzIG9taXR0ZWQgYmVjYXVzZSB3ZeKAmXJlIG5vdCB1c2luZyBpdC5cbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICB9O1xuICAgICAgY2FzZSA0OiByZXR1cm4gZnVuY3Rpb24oYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBidWlsdGluSXRlcmF0ZWU7XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgY2FsbGJhY2tzIHRoYXQgY2FuIGJlIGFwcGxpZWQgdG8gZWFjaFxuICAvLyBlbGVtZW50IGluIGEgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRoZSBkZXNpcmVkIHJlc3VsdCDigJQgZWl0aGVyIGBpZGVudGl0eWAsXG4gIC8vIGFuIGFyYml0cmFyeSBjYWxsYmFjaywgYSBwcm9wZXJ0eSBtYXRjaGVyLCBvciBhIHByb3BlcnR5IGFjY2Vzc29yLlxuICB2YXIgY2IgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgICBpZiAoXy5pdGVyYXRlZSAhPT0gYnVpbHRpbkl0ZXJhdGVlKSByZXR1cm4gXy5pdGVyYXRlZSh2YWx1ZSwgY29udGV4dCk7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBfLmlkZW50aXR5O1xuICAgIGlmIChfLmlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm4gb3B0aW1pemVDYih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpO1xuICAgIGlmIChfLmlzT2JqZWN0KHZhbHVlKSAmJiAhXy5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIF8ubWF0Y2hlcih2YWx1ZSk7XG4gICAgcmV0dXJuIF8ucHJvcGVydHkodmFsdWUpO1xuICB9O1xuXG4gIC8vIEV4dGVybmFsIHdyYXBwZXIgZm9yIG91ciBjYWxsYmFjayBnZW5lcmF0b3IuIFVzZXJzIG1heSBjdXN0b21pemVcbiAgLy8gYF8uaXRlcmF0ZWVgIGlmIHRoZXkgd2FudCBhZGRpdGlvbmFsIHByZWRpY2F0ZS9pdGVyYXRlZSBzaG9ydGhhbmQgc3R5bGVzLlxuICAvLyBUaGlzIGFic3RyYWN0aW9uIGhpZGVzIHRoZSBpbnRlcm5hbC1vbmx5IGFyZ0NvdW50IGFyZ3VtZW50LlxuICBfLml0ZXJhdGVlID0gYnVpbHRpbkl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gY2IodmFsdWUsIGNvbnRleHQsIEluZmluaXR5KTtcbiAgfTtcblxuICAvLyBTb21lIGZ1bmN0aW9ucyB0YWtlIGEgdmFyaWFibGUgbnVtYmVyIG9mIGFyZ3VtZW50cywgb3IgYSBmZXcgZXhwZWN0ZWRcbiAgLy8gYXJndW1lbnRzIGF0IHRoZSBiZWdpbm5pbmcgYW5kIHRoZW4gYSB2YXJpYWJsZSBudW1iZXIgb2YgdmFsdWVzIHRvIG9wZXJhdGVcbiAgLy8gb24uIFRoaXMgaGVscGVyIGFjY3VtdWxhdGVzIGFsbCByZW1haW5pbmcgYXJndW1lbnRzIHBhc3QgdGhlIGZ1bmN0aW9u4oCZc1xuICAvLyBhcmd1bWVudCBsZW5ndGggKG9yIGFuIGV4cGxpY2l0IGBzdGFydEluZGV4YCksIGludG8gYW4gYXJyYXkgdGhhdCBiZWNvbWVzXG4gIC8vIHRoZSBsYXN0IGFyZ3VtZW50LiBTaW1pbGFyIHRvIEVTNuKAmXMgXCJyZXN0IHBhcmFtZXRlclwiLlxuICB2YXIgcmVzdEFyZ3VtZW50cyA9IGZ1bmN0aW9uKGZ1bmMsIHN0YXJ0SW5kZXgpIHtcbiAgICBzdGFydEluZGV4ID0gc3RhcnRJbmRleCA9PSBudWxsID8gZnVuYy5sZW5ndGggLSAxIDogK3N0YXJ0SW5kZXg7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KGFyZ3VtZW50cy5sZW5ndGggLSBzdGFydEluZGV4LCAwKSxcbiAgICAgICAgICByZXN0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICBmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXggKyBzdGFydEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoc3RhcnRJbmRleCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpcywgcmVzdCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzLCBhcmd1bWVudHNbMF0sIHJlc3QpO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpcywgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0sIHJlc3QpO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShzdGFydEluZGV4ICsgMSk7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBzdGFydEluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIGFyZ3Nbc3RhcnRJbmRleF0gPSByZXN0O1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSBhbm90aGVyLlxuICB2YXIgYmFzZUNyZWF0ZSA9IGZ1bmN0aW9uKHByb3RvdHlwZSkge1xuICAgIGlmICghXy5pc09iamVjdChwcm90b3R5cGUpKSByZXR1cm4ge307XG4gICAgaWYgKG5hdGl2ZUNyZWF0ZSkgcmV0dXJuIG5hdGl2ZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgIEN0b3IucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICAgIHZhciByZXN1bHQgPSBuZXcgQ3RvcjtcbiAgICBDdG9yLnByb3RvdHlwZSA9IG51bGw7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgc2hhbGxvd1Byb3BlcnR5ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiA9PSBudWxsID8gdm9pZCAwIDogb2JqW2tleV07XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGFzID0gZnVuY3Rpb24ob2JqLCBwYXRoKSB7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwYXRoKTtcbiAgfVxuXG4gIHZhciBkZWVwR2V0ID0gZnVuY3Rpb24ob2JqLCBwYXRoKSB7XG4gICAgdmFyIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICAgIG9iaiA9IG9ialtwYXRoW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGxlbmd0aCA/IG9iaiA6IHZvaWQgMDtcbiAgfTtcblxuICAvLyBIZWxwZXIgZm9yIGNvbGxlY3Rpb24gbWV0aG9kcyB0byBkZXRlcm1pbmUgd2hldGhlciBhIGNvbGxlY3Rpb25cbiAgLy8gc2hvdWxkIGJlIGl0ZXJhdGVkIGFzIGFuIGFycmF5IG9yIGFzIGFuIG9iamVjdC5cbiAgLy8gUmVsYXRlZDogaHR0cDovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9sZW5ndGhcbiAgLy8gQXZvaWRzIGEgdmVyeSBuYXN0eSBpT1MgOCBKSVQgYnVnIG9uIEFSTS02NC4gIzIwOTRcbiAgdmFyIE1BWF9BUlJBWV9JTkRFWCA9IE1hdGgucG93KDIsIDUzKSAtIDE7XG4gIHZhciBnZXRMZW5ndGggPSBzaGFsbG93UHJvcGVydHkoJ2xlbmd0aCcpO1xuICB2YXIgaXNBcnJheUxpa2UgPSBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChjb2xsZWN0aW9uKTtcbiAgICByZXR1cm4gdHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyAmJiBsZW5ndGggPj0gMCAmJiBsZW5ndGggPD0gTUFYX0FSUkFZX0lOREVYO1xuICB9O1xuXG4gIC8vIENvbGxlY3Rpb24gRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gVGhlIGNvcm5lcnN0b25lLCBhbiBgZWFjaGAgaW1wbGVtZW50YXRpb24sIGFrYSBgZm9yRWFjaGAuXG4gIC8vIEhhbmRsZXMgcmF3IG9iamVjdHMgaW4gYWRkaXRpb24gdG8gYXJyYXktbGlrZXMuIFRyZWF0cyBhbGxcbiAgLy8gc3BhcnNlIGFycmF5LWxpa2VzIGFzIGlmIHRoZXkgd2VyZSBkZW5zZS5cbiAgXy5lYWNoID0gXy5mb3JFYWNoID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIGksIGxlbmd0aDtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkge1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdGVlKG9ialtpXSwgaSwgb2JqKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0ZWUob2JqW2tleXNbaV1dLCBrZXlzW2ldLCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0ZWUgdG8gZWFjaCBlbGVtZW50LlxuICBfLm1hcCA9IF8uY29sbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxuICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgcmVzdWx0cyA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIHJlc3VsdHNbaW5kZXhdID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBDcmVhdGUgYSByZWR1Y2luZyBmdW5jdGlvbiBpdGVyYXRpbmcgbGVmdCBvciByaWdodC5cbiAgdmFyIGNyZWF0ZVJlZHVjZSA9IGZ1bmN0aW9uKGRpcikge1xuICAgIC8vIFdyYXAgY29kZSB0aGF0IHJlYXNzaWducyBhcmd1bWVudCB2YXJpYWJsZXMgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbiB0aGFuXG4gICAgLy8gdGhlIG9uZSB0aGF0IGFjY2Vzc2VzIGBhcmd1bWVudHMubGVuZ3RoYCB0byBhdm9pZCBhIHBlcmYgaGl0LiAoIzE5OTEpXG4gICAgdmFyIHJlZHVjZXIgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBtZW1vLCBpbml0aWFsKSB7XG4gICAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxuICAgICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZGlyID4gMCA/IDAgOiBsZW5ndGggLSAxO1xuICAgICAgaWYgKCFpbml0aWFsKSB7XG4gICAgICAgIG1lbW8gPSBvYmpba2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXhdO1xuICAgICAgICBpbmRleCArPSBkaXI7XG4gICAgICB9XG4gICAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICAgIG1lbW8gPSBpdGVyYXRlZShtZW1vLCBvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGNvbnRleHQpIHtcbiAgICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+PSAzO1xuICAgICAgcmV0dXJuIHJlZHVjZXIob2JqLCBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0LCA0KSwgbWVtbywgaW5pdGlhbCk7XG4gICAgfTtcbiAgfTtcblxuICAvLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsXG4gIC8vIG9yIGBmb2xkbGAuXG4gIF8ucmVkdWNlID0gXy5mb2xkbCA9IF8uaW5qZWN0ID0gY3JlYXRlUmVkdWNlKDEpO1xuXG4gIC8vIFRoZSByaWdodC1hc3NvY2lhdGl2ZSB2ZXJzaW9uIG9mIHJlZHVjZSwgYWxzbyBrbm93biBhcyBgZm9sZHJgLlxuICBfLnJlZHVjZVJpZ2h0ID0gXy5mb2xkciA9IGNyZWF0ZVJlZHVjZSgtMSk7XG5cbiAgLy8gUmV0dXJuIHRoZSBmaXJzdCB2YWx1ZSB3aGljaCBwYXNzZXMgYSB0cnV0aCB0ZXN0LiBBbGlhc2VkIGFzIGBkZXRlY3RgLlxuICBfLmZpbmQgPSBfLmRldGVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIGtleUZpbmRlciA9IGlzQXJyYXlMaWtlKG9iaikgPyBfLmZpbmRJbmRleCA6IF8uZmluZEtleTtcbiAgICB2YXIga2V5ID0ga2V5RmluZGVyKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICBpZiAoa2V5ICE9PSB2b2lkIDAgJiYga2V5ICE9PSAtMSkgcmV0dXJuIG9ialtrZXldO1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYHNlbGVjdGAuXG4gIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBsaXN0KSkgcmVzdWx0cy5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBmb3Igd2hpY2ggYSB0cnV0aCB0ZXN0IGZhaWxzLlxuICBfLnJlamVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5uZWdhdGUoY2IocHJlZGljYXRlKSksIGNvbnRleHQpO1xuICB9O1xuXG4gIC8vIERldGVybWluZSB3aGV0aGVyIGFsbCBvZiB0aGUgZWxlbWVudHMgbWF0Y2ggYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBhbGxgLlxuICBfLmV2ZXJ5ID0gXy5hbGwgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIGlmICghcHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgYXQgbGVhc3Qgb25lIGVsZW1lbnQgaW4gdGhlIG9iamVjdCBtYXRjaGVzIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYW55YC5cbiAgXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiB0aGUgYXJyYXkgb3Igb2JqZWN0IGNvbnRhaW5zIGEgZ2l2ZW4gaXRlbSAodXNpbmcgYD09PWApLlxuICAvLyBBbGlhc2VkIGFzIGBpbmNsdWRlc2AgYW5kIGBpbmNsdWRlYC5cbiAgXy5jb250YWlucyA9IF8uaW5jbHVkZXMgPSBfLmluY2x1ZGUgPSBmdW5jdGlvbihvYmosIGl0ZW0sIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICBpZiAoIWlzQXJyYXlMaWtlKG9iaikpIG9iaiA9IF8udmFsdWVzKG9iaik7XG4gICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggIT0gJ251bWJlcicgfHwgZ3VhcmQpIGZyb21JbmRleCA9IDA7XG4gICAgcmV0dXJuIF8uaW5kZXhPZihvYmosIGl0ZW0sIGZyb21JbmRleCkgPj0gMDtcbiAgfTtcblxuICAvLyBJbnZva2UgYSBtZXRob2QgKHdpdGggYXJndW1lbnRzKSBvbiBldmVyeSBpdGVtIGluIGEgY29sbGVjdGlvbi5cbiAgXy5pbnZva2UgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwgcGF0aCwgYXJncykge1xuICAgIHZhciBjb250ZXh0UGF0aCwgZnVuYztcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHBhdGgpKSB7XG4gICAgICBmdW5jID0gcGF0aDtcbiAgICB9IGVsc2UgaWYgKF8uaXNBcnJheShwYXRoKSkge1xuICAgICAgY29udGV4dFBhdGggPSBwYXRoLnNsaWNlKDAsIC0xKTtcbiAgICAgIHBhdGggPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBfLm1hcChvYmosIGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgIHZhciBtZXRob2QgPSBmdW5jO1xuICAgICAgaWYgKCFtZXRob2QpIHtcbiAgICAgICAgaWYgKGNvbnRleHRQYXRoICYmIGNvbnRleHRQYXRoLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnRleHQgPSBkZWVwR2V0KGNvbnRleHQsIGNvbnRleHRQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dCA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgICAgICBtZXRob2QgPSBjb250ZXh0W3BhdGhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ldGhvZCA9PSBudWxsID8gbWV0aG9kIDogbWV0aG9kLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBtYXBgOiBmZXRjaGluZyBhIHByb3BlcnR5LlxuICBfLnBsdWNrID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBfLnByb3BlcnR5KGtleSkpO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbHRlcmA6IHNlbGVjdGluZyBvbmx5IG9iamVjdHNcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy53aGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBfLm1hdGNoZXIoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaW5kYDogZ2V0dGluZyB0aGUgZmlyc3Qgb2JqZWN0XG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8uZmluZFdoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykge1xuICAgIHJldHVybiBfLmZpbmQob2JqLCBfLm1hdGNoZXIoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWF4ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSAtSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IC1JbmZpbml0eSxcbiAgICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICAgIGlmIChpdGVyYXRlZSA9PSBudWxsIHx8IHR5cGVvZiBpdGVyYXRlZSA9PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqWzBdICE9ICdvYmplY3QnICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlID4gcmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2LCBpbmRleCwgbGlzdCkge1xuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHYsIGluZGV4LCBsaXN0KTtcbiAgICAgICAgaWYgKGNvbXB1dGVkID4gbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSAtSW5maW5pdHkgJiYgcmVzdWx0ID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB2O1xuICAgICAgICAgIGxhc3RDb21wdXRlZCA9IGNvbXB1dGVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWluID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSBJbmZpbml0eSwgbGFzdENvbXB1dGVkID0gSW5maW5pdHksXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCB8fCB0eXBlb2YgaXRlcmF0ZWUgPT0gJ251bWJlcicgJiYgdHlwZW9mIG9ialswXSAhPSAnb2JqZWN0JyAmJiBvYmogIT0gbnVsbCkge1xuICAgICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSA8IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odiwgaW5kZXgsIGxpc3QpIHtcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2LCBpbmRleCwgbGlzdCk7XG4gICAgICAgIGlmIChjb21wdXRlZCA8IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gSW5maW5pdHkgJiYgcmVzdWx0ID09PSBJbmZpbml0eSkge1xuICAgICAgICAgIHJlc3VsdCA9IHY7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFNodWZmbGUgYSBjb2xsZWN0aW9uLlxuICBfLnNodWZmbGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gXy5zYW1wbGUob2JqLCBJbmZpbml0eSk7XG4gIH07XG5cbiAgLy8gU2FtcGxlICoqbioqIHJhbmRvbSB2YWx1ZXMgZnJvbSBhIGNvbGxlY3Rpb24gdXNpbmcgdGhlIG1vZGVybiB2ZXJzaW9uIG9mIHRoZVxuICAvLyBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVy4oCTWWF0ZXNfc2h1ZmZsZSkuXG4gIC8vIElmICoqbioqIGlzIG5vdCBzcGVjaWZpZWQsIHJldHVybnMgYSBzaW5nbGUgcmFuZG9tIGVsZW1lbnQuXG4gIC8vIFRoZSBpbnRlcm5hbCBgZ3VhcmRgIGFyZ3VtZW50IGFsbG93cyBpdCB0byB3b3JrIHdpdGggYG1hcGAuXG4gIF8uc2FtcGxlID0gZnVuY3Rpb24ob2JqLCBuLCBndWFyZCkge1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHtcbiAgICAgIGlmICghaXNBcnJheUxpa2Uob2JqKSkgb2JqID0gXy52YWx1ZXMob2JqKTtcbiAgICAgIHJldHVybiBvYmpbXy5yYW5kb20ob2JqLmxlbmd0aCAtIDEpXTtcbiAgICB9XG4gICAgdmFyIHNhbXBsZSA9IGlzQXJyYXlMaWtlKG9iaikgPyBfLmNsb25lKG9iaikgOiBfLnZhbHVlcyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoc2FtcGxlKTtcbiAgICBuID0gTWF0aC5tYXgoTWF0aC5taW4obiwgbGVuZ3RoKSwgMCk7XG4gICAgdmFyIGxhc3QgPSBsZW5ndGggLSAxO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBuOyBpbmRleCsrKSB7XG4gICAgICB2YXIgcmFuZCA9IF8ucmFuZG9tKGluZGV4LCBsYXN0KTtcbiAgICAgIHZhciB0ZW1wID0gc2FtcGxlW2luZGV4XTtcbiAgICAgIHNhbXBsZVtpbmRleF0gPSBzYW1wbGVbcmFuZF07XG4gICAgICBzYW1wbGVbcmFuZF0gPSB0ZW1wO1xuICAgIH1cbiAgICByZXR1cm4gc2FtcGxlLnNsaWNlKDAsIG4pO1xuICB9O1xuXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRlZS5cbiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gXy5wbHVjayhfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGxpc3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgaW5kZXg6IGluZGV4KyssXG4gICAgICAgIGNyaXRlcmlhOiBpdGVyYXRlZSh2YWx1ZSwga2V5LCBsaXN0KVxuICAgICAgfTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7XG4gICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0LmluZGV4IC0gcmlnaHQuaW5kZXg7XG4gICAgfSksICd2YWx1ZScpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSBcImdyb3VwIGJ5XCIgb3BlcmF0aW9ucy5cbiAgdmFyIGdyb3VwID0gZnVuY3Rpb24oYmVoYXZpb3IsIHBhcnRpdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gcGFydGl0aW9uID8gW1tdLCBbXV0gOiB7fTtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciBrZXkgPSBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIG9iaik7XG4gICAgICAgIGJlaGF2aW9yKHJlc3VsdCwgdmFsdWUsIGtleSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBHcm91cHMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbi4gUGFzcyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlXG4gIC8vIHRvIGdyb3VwIGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY3JpdGVyaW9uLlxuICBfLmdyb3VwQnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7IGVsc2UgcmVzdWx0W2tleV0gPSBbdmFsdWVdO1xuICB9KTtcblxuICAvLyBJbmRleGVzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24sIHNpbWlsYXIgdG8gYGdyb3VwQnlgLCBidXQgZm9yXG4gIC8vIHdoZW4geW91IGtub3cgdGhhdCB5b3VyIGluZGV4IHZhbHVlcyB3aWxsIGJlIHVuaXF1ZS5cbiAgXy5pbmRleEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfSk7XG5cbiAgLy8gQ291bnRzIGluc3RhbmNlcyBvZiBhbiBvYmplY3QgdGhhdCBncm91cCBieSBhIGNlcnRhaW4gY3JpdGVyaW9uLiBQYXNzXG4gIC8vIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGUgdG8gY291bnQgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAvLyBjcml0ZXJpb24uXG4gIF8uY291bnRCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIGlmIChoYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XSsrOyBlbHNlIHJlc3VsdFtrZXldID0gMTtcbiAgfSk7XG5cbiAgdmFyIHJlU3RyU3ltYm9sID0gL1teXFx1ZDgwMC1cXHVkZmZmXXxbXFx1ZDgwMC1cXHVkYmZmXVtcXHVkYzAwLVxcdWRmZmZdfFtcXHVkODAwLVxcdWRmZmZdL2c7XG4gIC8vIFNhZmVseSBjcmVhdGUgYSByZWFsLCBsaXZlIGFycmF5IGZyb20gYW55dGhpbmcgaXRlcmFibGUuXG4gIF8udG9BcnJheSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghb2JqKSByZXR1cm4gW107XG4gICAgaWYgKF8uaXNBcnJheShvYmopKSByZXR1cm4gc2xpY2UuY2FsbChvYmopO1xuICAgIGlmIChfLmlzU3RyaW5nKG9iaikpIHtcbiAgICAgIC8vIEtlZXAgc3Vycm9nYXRlIHBhaXIgY2hhcmFjdGVycyB0b2dldGhlclxuICAgICAgcmV0dXJuIG9iai5tYXRjaChyZVN0clN5bWJvbCk7XG4gICAgfVxuICAgIGlmIChpc0FycmF5TGlrZShvYmopKSByZXR1cm4gXy5tYXAob2JqLCBfLmlkZW50aXR5KTtcbiAgICByZXR1cm4gXy52YWx1ZXMob2JqKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBhbiBvYmplY3QuXG4gIF8uc2l6ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIDA7XG4gICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iaikgPyBvYmoubGVuZ3RoIDogXy5rZXlzKG9iaikubGVuZ3RoO1xuICB9O1xuXG4gIC8vIFNwbGl0IGEgY29sbGVjdGlvbiBpbnRvIHR3byBhcnJheXM6IG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgc2F0aXNmeSB0aGUgZ2l2ZW5cbiAgLy8gcHJlZGljYXRlLCBhbmQgb25lIHdob3NlIGVsZW1lbnRzIGFsbCBkbyBub3Qgc2F0aXNmeSB0aGUgcHJlZGljYXRlLlxuICBfLnBhcnRpdGlvbiA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIHBhc3MpIHtcbiAgICByZXN1bHRbcGFzcyA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgfSwgdHJ1ZSk7XG5cbiAgLy8gQXJyYXkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEdldCB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBBbGlhc2VkIGFzIGBoZWFkYCBhbmQgYHRha2VgLiBUaGUgKipndWFyZCoqIGNoZWNrXG4gIC8vIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbiAgXy5maXJzdCA9IF8uaGVhZCA9IF8udGFrZSA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA8IDEpIHJldHVybiBuID09IG51bGwgPyB2b2lkIDAgOiBbXTtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbMF07XG4gICAgcmV0dXJuIF8uaW5pdGlhbChhcnJheSwgYXJyYXkubGVuZ3RoIC0gbik7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgbGFzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEVzcGVjaWFsbHkgdXNlZnVsIG9uXG4gIC8vIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIGFsbCB0aGUgdmFsdWVzIGluXG4gIC8vIHRoZSBhcnJheSwgZXhjbHVkaW5nIHRoZSBsYXN0IE4uXG4gIF8uaW5pdGlhbCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSAobiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pKSk7XG4gIH07XG5cbiAgLy8gR2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGxhc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPCAxKSByZXR1cm4gbiA9PSBudWxsID8gdm9pZCAwIDogW107XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBfLnJlc3QoYXJyYXksIE1hdGgubWF4KDAsIGFycmF5Lmxlbmd0aCAtIG4pKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBmaXJzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEFsaWFzZWQgYXMgYHRhaWxgIGFuZCBgZHJvcGAuXG4gIC8vIEVzcGVjaWFsbHkgdXNlZnVsIG9uIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nIGFuICoqbioqIHdpbGwgcmV0dXJuXG4gIC8vIHRoZSByZXN0IE4gdmFsdWVzIGluIHRoZSBhcnJheS5cbiAgXy5yZXN0ID0gXy50YWlsID0gXy5kcm9wID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKTtcbiAgfTtcblxuICAvLyBUcmltIG91dCBhbGwgZmFsc3kgdmFsdWVzIGZyb20gYW4gYXJyYXkuXG4gIF8uY29tcGFjdCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBCb29sZWFuKTtcbiAgfTtcblxuICAvLyBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBvZiBhIHJlY3Vyc2l2ZSBgZmxhdHRlbmAgZnVuY3Rpb24uXG4gIHZhciBmbGF0dGVuID0gZnVuY3Rpb24oaW5wdXQsIHNoYWxsb3csIHN0cmljdCwgb3V0cHV0KSB7XG4gICAgb3V0cHV0ID0gb3V0cHV0IHx8IFtdO1xuICAgIHZhciBpZHggPSBvdXRwdXQubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoaW5wdXQpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJiAoXy5pc0FycmF5KHZhbHVlKSB8fCBfLmlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgLy8gRmxhdHRlbiBjdXJyZW50IGxldmVsIG9mIGFycmF5IG9yIGFyZ3VtZW50cyBvYmplY3QuXG4gICAgICAgIGlmIChzaGFsbG93KSB7XG4gICAgICAgICAgdmFyIGogPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKGogPCBsZW4pIG91dHB1dFtpZHgrK10gPSB2YWx1ZVtqKytdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZsYXR0ZW4odmFsdWUsIHNoYWxsb3csIHN0cmljdCwgb3V0cHV0KTtcbiAgICAgICAgICBpZHggPSBvdXRwdXQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QpIHtcbiAgICAgICAgb3V0cHV0W2lkeCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIC8vIEZsYXR0ZW4gb3V0IGFuIGFycmF5LCBlaXRoZXIgcmVjdXJzaXZlbHkgKGJ5IGRlZmF1bHQpLCBvciBqdXN0IG9uZSBsZXZlbC5cbiAgXy5mbGF0dGVuID0gZnVuY3Rpb24oYXJyYXksIHNoYWxsb3cpIHtcbiAgICByZXR1cm4gZmxhdHRlbihhcnJheSwgc2hhbGxvdywgZmFsc2UpO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHZlcnNpb24gb2YgdGhlIGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIHZhbHVlKHMpLlxuICBfLndpdGhvdXQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGFycmF5LCBvdGhlckFycmF5cykge1xuICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXJyYXksIG90aGVyQXJyYXlzKTtcbiAgfSk7XG5cbiAgLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHlcbiAgLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBUaGUgZmFzdGVyIGFsZ29yaXRobSB3aWxsIG5vdCB3b3JrIHdpdGggYW4gaXRlcmF0ZWUgaWYgdGhlIGl0ZXJhdGVlXG4gIC8vIGlzIG5vdCBhIG9uZS10by1vbmUgZnVuY3Rpb24sIHNvIHByb3ZpZGluZyBhbiBpdGVyYXRlZSB3aWxsIGRpc2FibGVcbiAgLy8gdGhlIGZhc3RlciBhbGdvcml0aG0uXG4gIC8vIEFsaWFzZWQgYXMgYHVuaXF1ZWAuXG4gIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGlmICghXy5pc0Jvb2xlYW4oaXNTb3J0ZWQpKSB7XG4gICAgICBjb250ZXh0ID0gaXRlcmF0ZWU7XG4gICAgICBpdGVyYXRlZSA9IGlzU29ydGVkO1xuICAgICAgaXNTb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGl0ZXJhdGVlICE9IG51bGwpIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldLFxuICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSwgaSwgYXJyYXkpIDogdmFsdWU7XG4gICAgICBpZiAoaXNTb3J0ZWQgJiYgIWl0ZXJhdGVlKSB7XG4gICAgICAgIGlmICghaSB8fCBzZWVuICE9PSBjb21wdXRlZCkgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICB9IGVsc2UgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmICghXy5jb250YWlucyhzZWVuLCBjb21wdXRlZCkpIHtcbiAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghXy5jb250YWlucyhyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSB1bmlvbjogZWFjaCBkaXN0aW5jdCBlbGVtZW50IGZyb20gYWxsIG9mXG4gIC8vIHRoZSBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLnVuaW9uID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihhcnJheXMpIHtcbiAgICByZXR1cm4gXy51bmlxKGZsYXR0ZW4oYXJyYXlzLCB0cnVlLCB0cnVlKSk7XG4gIH0pO1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGVcbiAgLy8gcGFzc2VkLWluIGFycmF5cy5cbiAgXy5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBhcnJheVtpXTtcbiAgICAgIGlmIChfLmNvbnRhaW5zKHJlc3VsdCwgaXRlbSkpIGNvbnRpbnVlO1xuICAgICAgdmFyIGo7XG4gICAgICBmb3IgKGogPSAxOyBqIDwgYXJnc0xlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmICghXy5jb250YWlucyhhcmd1bWVudHNbal0sIGl0ZW0pKSBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChqID09PSBhcmdzTGVuZ3RoKSByZXN1bHQucHVzaChpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBUYWtlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gb25lIGFycmF5IGFuZCBhIG51bWJlciBvZiBvdGhlciBhcnJheXMuXG4gIC8vIE9ubHkgdGhlIGVsZW1lbnRzIHByZXNlbnQgaW4ganVzdCB0aGUgZmlyc3QgYXJyYXkgd2lsbCByZW1haW4uXG4gIF8uZGlmZmVyZW5jZSA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJyYXksIHJlc3QpIHtcbiAgICByZXN0ID0gZmxhdHRlbihyZXN0LCB0cnVlLCB0cnVlKTtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIHJldHVybiAhXy5jb250YWlucyhyZXN0LCB2YWx1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIENvbXBsZW1lbnQgb2YgXy56aXAuIFVuemlwIGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIGFuZCBncm91cHNcbiAgLy8gZWFjaCBhcnJheSdzIGVsZW1lbnRzIG9uIHNoYXJlZCBpbmRpY2VzLlxuICBfLnVuemlwID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgJiYgXy5tYXgoYXJyYXksIGdldExlbmd0aCkubGVuZ3RoIHx8IDA7XG4gICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gXy5wbHVjayhhcnJheSwgaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFppcCB0b2dldGhlciBtdWx0aXBsZSBsaXN0cyBpbnRvIGEgc2luZ2xlIGFycmF5IC0tIGVsZW1lbnRzIHRoYXQgc2hhcmVcbiAgLy8gYW4gaW5kZXggZ28gdG9nZXRoZXIuXG4gIF8uemlwID0gcmVzdEFyZ3VtZW50cyhfLnVuemlwKTtcblxuICAvLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4gIC8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZlxuICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuIFBhc3NpbmcgYnkgcGFpcnMgaXMgdGhlIHJldmVyc2Ugb2YgXy5wYWlycy5cbiAgXy5vYmplY3QgPSBmdW5jdGlvbihsaXN0LCB2YWx1ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChsaXN0KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgIHJlc3VsdFtsaXN0W2ldXSA9IHZhbHVlc1tpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFtsaXN0W2ldWzBdXSA9IGxpc3RbaV1bMV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gR2VuZXJhdG9yIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgZmluZEluZGV4IGFuZCBmaW5kTGFzdEluZGV4IGZ1bmN0aW9ucy5cbiAgdmFyIGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyID0gZnVuY3Rpb24oZGlyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgICAgIHZhciBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcbiAgICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGluZGV4IG9uIGFuIGFycmF5LWxpa2UgdGhhdCBwYXNzZXMgYSBwcmVkaWNhdGUgdGVzdC5cbiAgXy5maW5kSW5kZXggPSBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlcigxKTtcbiAgXy5maW5kTGFzdEluZGV4ID0gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoLTEpO1xuXG4gIC8vIFVzZSBhIGNvbXBhcmF0b3IgZnVuY3Rpb24gdG8gZmlndXJlIG91dCB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2hcbiAgLy8gYW4gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLlxuICBfLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24oYXJyYXksIG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTtcbiAgICB2YXIgdmFsdWUgPSBpdGVyYXRlZShvYmopO1xuICAgIHZhciBsb3cgPSAwLCBoaWdoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgdmFyIG1pZCA9IE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMik7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbWlkXSkgPCB2YWx1ZSkgbG93ID0gbWlkICsgMTsgZWxzZSBoaWdoID0gbWlkO1xuICAgIH1cbiAgICByZXR1cm4gbG93O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRvciBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGluZGV4T2YgYW5kIGxhc3RJbmRleE9mIGZ1bmN0aW9ucy5cbiAgdmFyIGNyZWF0ZUluZGV4RmluZGVyID0gZnVuY3Rpb24oZGlyLCBwcmVkaWNhdGVGaW5kLCBzb3J0ZWRJbmRleCkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgaXRlbSwgaWR4KSB7XG4gICAgICB2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgICBpZiAodHlwZW9mIGlkeCA9PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoZGlyID4gMCkge1xuICAgICAgICAgIGkgPSBpZHggPj0gMCA/IGlkeCA6IE1hdGgubWF4KGlkeCArIGxlbmd0aCwgaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGVuZ3RoID0gaWR4ID49IDAgPyBNYXRoLm1pbihpZHggKyAxLCBsZW5ndGgpIDogaWR4ICsgbGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzb3J0ZWRJbmRleCAmJiBpZHggJiYgbGVuZ3RoKSB7XG4gICAgICAgIGlkeCA9IHNvcnRlZEluZGV4KGFycmF5LCBpdGVtKTtcbiAgICAgICAgcmV0dXJuIGFycmF5W2lkeF0gPT09IGl0ZW0gPyBpZHggOiAtMTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtICE9PSBpdGVtKSB7XG4gICAgICAgIGlkeCA9IHByZWRpY2F0ZUZpbmQoc2xpY2UuY2FsbChhcnJheSwgaSwgbGVuZ3RoKSwgXy5pc05hTik7XG4gICAgICAgIHJldHVybiBpZHggPj0gMCA/IGlkeCArIGkgOiAtMTtcbiAgICAgIH1cbiAgICAgIGZvciAoaWR4ID0gZGlyID4gMCA/IGkgOiBsZW5ndGggLSAxOyBpZHggPj0gMCAmJiBpZHggPCBsZW5ndGg7IGlkeCArPSBkaXIpIHtcbiAgICAgICAgaWYgKGFycmF5W2lkeF0gPT09IGl0ZW0pIHJldHVybiBpZHg7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuIGl0ZW0gaW4gYW4gYXJyYXksXG4gIC8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG4gIC8vIElmIHRoZSBhcnJheSBpcyBsYXJnZSBhbmQgYWxyZWFkeSBpbiBzb3J0IG9yZGVyLCBwYXNzIGB0cnVlYFxuICAvLyBmb3IgKippc1NvcnRlZCoqIHRvIHVzZSBiaW5hcnkgc2VhcmNoLlxuICBfLmluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigxLCBfLmZpbmRJbmRleCwgXy5zb3J0ZWRJbmRleCk7XG4gIF8ubGFzdEluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigtMSwgXy5maW5kTGFzdEluZGV4KTtcblxuICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mXG4gIC8vIHRoZSBuYXRpdmUgUHl0aG9uIGByYW5nZSgpYCBmdW5jdGlvbi4gU2VlXG4gIC8vIFt0aGUgUHl0aG9uIGRvY3VtZW50YXRpb25dKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9mdW5jdGlvbnMuaHRtbCNyYW5nZSkuXG4gIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChzdG9wID09IG51bGwpIHtcbiAgICAgIHN0b3AgPSBzdGFydCB8fCAwO1xuICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICBpZiAoIXN0ZXApIHtcbiAgICAgIHN0ZXAgPSBzdG9wIDwgc3RhcnQgPyAtMSA6IDE7XG4gICAgfVxuXG4gICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApLCAwKTtcbiAgICB2YXIgcmFuZ2UgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKywgc3RhcnQgKz0gc3RlcCkge1xuICAgICAgcmFuZ2VbaWR4XSA9IHN0YXJ0O1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICAvLyBDaHVuayBhIHNpbmdsZSBhcnJheSBpbnRvIG11bHRpcGxlIGFycmF5cywgZWFjaCBjb250YWluaW5nIGBjb3VudGAgb3IgZmV3ZXJcbiAgLy8gaXRlbXMuXG4gIF8uY2h1bmsgPSBmdW5jdGlvbihhcnJheSwgY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gbnVsbCB8fCBjb3VudCA8IDEpIHJldHVybiBbXTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHNsaWNlLmNhbGwoYXJyYXksIGksIGkgKz0gY291bnQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBGdW5jdGlvbiAoYWhlbSkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIERldGVybWluZXMgd2hldGhlciB0byBleGVjdXRlIGEgZnVuY3Rpb24gYXMgYSBjb25zdHJ1Y3RvclxuICAvLyBvciBhIG5vcm1hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gIHZhciBleGVjdXRlQm91bmQgPSBmdW5jdGlvbihzb3VyY2VGdW5jLCBib3VuZEZ1bmMsIGNvbnRleHQsIGNhbGxpbmdDb250ZXh0LCBhcmdzKSB7XG4gICAgaWYgKCEoY2FsbGluZ0NvbnRleHQgaW5zdGFuY2VvZiBib3VuZEZ1bmMpKSByZXR1cm4gc291cmNlRnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB2YXIgc2VsZiA9IGJhc2VDcmVhdGUoc291cmNlRnVuYy5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBzb3VyY2VGdW5jLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIGlmIChfLmlzT2JqZWN0KHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gYm91bmQgdG8gYSBnaXZlbiBvYmplY3QgKGFzc2lnbmluZyBgdGhpc2AsIGFuZCBhcmd1bWVudHMsXG4gIC8vIG9wdGlvbmFsbHkpLiBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgRnVuY3Rpb24uYmluZGAgaWZcbiAgLy8gYXZhaWxhYmxlLlxuICBfLmJpbmQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQsIGFyZ3MpIHtcbiAgICBpZiAoIV8uaXNGdW5jdGlvbihmdW5jKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQmluZCBtdXN0IGJlIGNhbGxlZCBvbiBhIGZ1bmN0aW9uJyk7XG4gICAgdmFyIGJvdW5kID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihjYWxsQXJncykge1xuICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgY29udGV4dCwgdGhpcywgYXJncy5jb25jYXQoY2FsbEFyZ3MpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH0pO1xuXG4gIC8vIFBhcnRpYWxseSBhcHBseSBhIGZ1bmN0aW9uIGJ5IGNyZWF0aW5nIGEgdmVyc2lvbiB0aGF0IGhhcyBoYWQgc29tZSBvZiBpdHNcbiAgLy8gYXJndW1lbnRzIHByZS1maWxsZWQsIHdpdGhvdXQgY2hhbmdpbmcgaXRzIGR5bmFtaWMgYHRoaXNgIGNvbnRleHQuIF8gYWN0c1xuICAvLyBhcyBhIHBsYWNlaG9sZGVyIGJ5IGRlZmF1bHQsIGFsbG93aW5nIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMgdG8gYmVcbiAgLy8gcHJlLWZpbGxlZC4gU2V0IGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIGZvciBhIGN1c3RvbSBwbGFjZWhvbGRlciBhcmd1bWVudC5cbiAgXy5wYXJ0aWFsID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihmdW5jLCBib3VuZEFyZ3MpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXIgPSBfLnBhcnRpYWwucGxhY2Vob2xkZXI7XG4gICAgdmFyIGJvdW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSAwLCBsZW5ndGggPSBib3VuZEFyZ3MubGVuZ3RoO1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBhcmdzW2ldID0gYm91bmRBcmdzW2ldID09PSBwbGFjZWhvbGRlciA/IGFyZ3VtZW50c1twb3NpdGlvbisrXSA6IGJvdW5kQXJnc1tpXTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA8IGFyZ3VtZW50cy5sZW5ndGgpIGFyZ3MucHVzaChhcmd1bWVudHNbcG9zaXRpb24rK10pO1xuICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgdGhpcywgdGhpcywgYXJncyk7XG4gICAgfTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH0pO1xuXG4gIF8ucGFydGlhbC5wbGFjZWhvbGRlciA9IF87XG5cbiAgLy8gQmluZCBhIG51bWJlciBvZiBhbiBvYmplY3QncyBtZXRob2RzIHRvIHRoYXQgb2JqZWN0LiBSZW1haW5pbmcgYXJndW1lbnRzXG4gIC8vIGFyZSB0aGUgbWV0aG9kIG5hbWVzIHRvIGJlIGJvdW5kLiBVc2VmdWwgZm9yIGVuc3VyaW5nIHRoYXQgYWxsIGNhbGxiYWNrc1xuICAvLyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuXG4gIF8uYmluZEFsbCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAga2V5cyA9IGZsYXR0ZW4oa2V5cywgZmFsc2UsIGZhbHNlKTtcbiAgICB2YXIgaW5kZXggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAoaW5kZXggPCAxKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBbGwgbXVzdCBiZSBwYXNzZWQgZnVuY3Rpb24gbmFtZXMnKTtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgb2JqW2tleV0gPSBfLmJpbmQob2JqW2tleV0sIG9iaik7XG4gICAgfVxuICB9KTtcblxuICAvLyBNZW1vaXplIGFuIGV4cGVuc2l2ZSBmdW5jdGlvbiBieSBzdG9yaW5nIGl0cyByZXN1bHRzLlxuICBfLm1lbW9pemUgPSBmdW5jdGlvbihmdW5jLCBoYXNoZXIpIHtcbiAgICB2YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIGNhY2hlID0gbWVtb2l6ZS5jYWNoZTtcbiAgICAgIHZhciBhZGRyZXNzID0gJycgKyAoaGFzaGVyID8gaGFzaGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrZXkpO1xuICAgICAgaWYgKCFoYXMoY2FjaGUsIGFkZHJlc3MpKSBjYWNoZVthZGRyZXNzXSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBjYWNoZVthZGRyZXNzXTtcbiAgICB9O1xuICAgIG1lbW9pemUuY2FjaGUgPSB7fTtcbiAgICByZXR1cm4gbWVtb2l6ZTtcbiAgfTtcblxuICAvLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzXG4gIC8vIGl0IHdpdGggdGhlIGFyZ3VtZW50cyBzdXBwbGllZC5cbiAgXy5kZWxheSA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oZnVuYywgd2FpdCwgYXJncykge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSwgd2FpdCk7XG4gIH0pO1xuXG4gIC8vIERlZmVycyBhIGZ1bmN0aW9uLCBzY2hlZHVsaW5nIGl0IHRvIHJ1biBhZnRlciB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhc1xuICAvLyBjbGVhcmVkLlxuICBfLmRlZmVyID0gXy5wYXJ0aWFsKF8uZGVsYXksIF8sIDEpO1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIGF0IG1vc3Qgb25jZVxuICAvLyBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS4gTm9ybWFsbHksIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbCBydW5cbiAgLy8gYXMgbXVjaCBhcyBpdCBjYW4sIHdpdGhvdXQgZXZlciBnb2luZyBtb3JlIHRoYW4gb25jZSBwZXIgYHdhaXRgIGR1cmF0aW9uO1xuICAvLyBidXQgaWYgeW91J2QgbGlrZSB0byBkaXNhYmxlIHRoZSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgcGFzc1xuICAvLyBge2xlYWRpbmc6IGZhbHNlfWAuIFRvIGRpc2FibGUgZXhlY3V0aW9uIG9uIHRoZSB0cmFpbGluZyBlZGdlLCBkaXR0by5cbiAgXy50aHJvdHRsZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGltZW91dCwgY29udGV4dCwgYXJncywgcmVzdWx0O1xuICAgIHZhciBwcmV2aW91cyA9IDA7XG4gICAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBfLm5vdygpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgfTtcblxuICAgIHZhciB0aHJvdHRsZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBub3cgPSBfLm5vdygpO1xuICAgICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSBwcmV2aW91cyA9IG5vdztcbiAgICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKG5vdyAtIHByZXZpb3VzKTtcbiAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGlmIChyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KSB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0aW9ucy50cmFpbGluZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHJlbWFpbmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB0aHJvdHRsZWQuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICBwcmV2aW91cyA9IDA7XG4gICAgICB0aW1lb3V0ID0gY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhyb3R0bGVkO1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAgLy8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cbiAgXy5kZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgIHZhciB0aW1lb3V0LCByZXN1bHQ7XG5cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbihjb250ZXh0LCBhcmdzKSB7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIGlmIChhcmdzKSByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH07XG5cbiAgICB2YXIgZGVib3VuY2VkID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihhcmdzKSB7XG4gICAgICBpZiAodGltZW91dCkgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgaWYgKGltbWVkaWF0ZSkge1xuICAgICAgICB2YXIgY2FsbE5vdyA9ICF0aW1lb3V0O1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICAgIGlmIChjYWxsTm93KSByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZW91dCA9IF8uZGVsYXkobGF0ZXIsIHdhaXQsIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgZGVib3VuY2VkLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgZnVuY3Rpb24gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBzZWNvbmQsXG4gIC8vIGFsbG93aW5nIHlvdSB0byBhZGp1c3QgYXJndW1lbnRzLCBydW4gY29kZSBiZWZvcmUgYW5kIGFmdGVyLCBhbmRcbiAgLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbiAgXy53cmFwID0gZnVuY3Rpb24oZnVuYywgd3JhcHBlcikge1xuICAgIHJldHVybiBfLnBhcnRpYWwod3JhcHBlciwgZnVuYyk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgcGFzc2VkLWluIHByZWRpY2F0ZS5cbiAgXy5uZWdhdGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIGEgbGlzdCBvZiBmdW5jdGlvbnMsIGVhY2hcbiAgLy8gY29uc3VtaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIHRoYXQgZm9sbG93cy5cbiAgXy5jb21wb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIHN0YXJ0ID0gYXJncy5sZW5ndGggLSAxO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpID0gc3RhcnQ7XG4gICAgICB2YXIgcmVzdWx0ID0gYXJnc1tzdGFydF0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHdoaWxlIChpLS0pIHJlc3VsdCA9IGFyZ3NbaV0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCBvbiBhbmQgYWZ0ZXIgdGhlIE50aCBjYWxsLlxuICBfLmFmdGVyID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aW1lcyA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCB1cCB0byAoYnV0IG5vdCBpbmNsdWRpbmcpIHRoZSBOdGggY2FsbC5cbiAgXy5iZWZvcmUgPSBmdW5jdGlvbih0aW1lcywgZnVuYykge1xuICAgIHZhciBtZW1vO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRpbWVzID4gMCkge1xuICAgICAgICBtZW1vID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgaWYgKHRpbWVzIDw9IDEpIGZ1bmMgPSBudWxsO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGF0IG1vc3Qgb25lIHRpbWUsIG5vIG1hdHRlciBob3dcbiAgLy8gb2Z0ZW4geW91IGNhbGwgaXQuIFVzZWZ1bCBmb3IgbGF6eSBpbml0aWFsaXphdGlvbi5cbiAgXy5vbmNlID0gXy5wYXJ0aWFsKF8uYmVmb3JlLCAyKTtcblxuICBfLnJlc3RBcmd1bWVudHMgPSByZXN0QXJndW1lbnRzO1xuXG4gIC8vIE9iamVjdCBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEtleXMgaW4gSUUgPCA5IHRoYXQgd29uJ3QgYmUgaXRlcmF0ZWQgYnkgYGZvciBrZXkgaW4gLi4uYCBhbmQgdGh1cyBtaXNzZWQuXG4gIHZhciBoYXNFbnVtQnVnID0gIXt0b1N0cmluZzogbnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoJ3RvU3RyaW5nJyk7XG4gIHZhciBub25FbnVtZXJhYmxlUHJvcHMgPSBbJ3ZhbHVlT2YnLCAnaXNQcm90b3R5cGVPZicsICd0b1N0cmluZycsXG4gICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ2hhc093blByb3BlcnR5JywgJ3RvTG9jYWxlU3RyaW5nJ107XG5cbiAgdmFyIGNvbGxlY3ROb25FbnVtUHJvcHMgPSBmdW5jdGlvbihvYmosIGtleXMpIHtcbiAgICB2YXIgbm9uRW51bUlkeCA9IG5vbkVudW1lcmFibGVQcm9wcy5sZW5ndGg7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gb2JqLmNvbnN0cnVjdG9yO1xuICAgIHZhciBwcm90byA9IF8uaXNGdW5jdGlvbihjb25zdHJ1Y3RvcikgJiYgY29uc3RydWN0b3IucHJvdG90eXBlIHx8IE9ialByb3RvO1xuXG4gICAgLy8gQ29uc3RydWN0b3IgaXMgYSBzcGVjaWFsIGNhc2UuXG4gICAgdmFyIHByb3AgPSAnY29uc3RydWN0b3InO1xuICAgIGlmIChoYXMob2JqLCBwcm9wKSAmJiAhXy5jb250YWlucyhrZXlzLCBwcm9wKSkga2V5cy5wdXNoKHByb3ApO1xuXG4gICAgd2hpbGUgKG5vbkVudW1JZHgtLSkge1xuICAgICAgcHJvcCA9IG5vbkVudW1lcmFibGVQcm9wc1tub25FbnVtSWR4XTtcbiAgICAgIGlmIChwcm9wIGluIG9iaiAmJiBvYmpbcHJvcF0gIT09IHByb3RvW3Byb3BdICYmICFfLmNvbnRhaW5zKGtleXMsIHByb3ApKSB7XG4gICAgICAgIGtleXMucHVzaChwcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIG5hbWVzIG9mIGFuIG9iamVjdCdzIG93biBwcm9wZXJ0aWVzLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgT2JqZWN0LmtleXNgLlxuICBfLmtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICAgIGlmIChuYXRpdmVLZXlzKSByZXR1cm4gbmF0aXZlS2V5cyhvYmopO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKGhhcyhvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICAgIC8vIEFoZW0sIElFIDwgOS5cbiAgICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFJldHJpZXZlIGFsbCB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LlxuICBfLmFsbEtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gICAgLy8gQWhlbSwgSUUgPCA5LlxuICAgIGlmIChoYXNFbnVtQnVnKSBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cyk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlc1tpXSA9IG9ialtrZXlzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQgb2YgdGhlIG9iamVjdC5cbiAgLy8gSW4gY29udHJhc3QgdG8gXy5tYXAgaXQgcmV0dXJucyBhbiBvYmplY3QuXG4gIF8ubWFwT2JqZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoLFxuICAgICAgICByZXN1bHRzID0ge307XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgIHJlc3VsdHNbY3VycmVudEtleV0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIENvbnZlcnQgYW4gb2JqZWN0IGludG8gYSBsaXN0IG9mIGBba2V5LCB2YWx1ZV1gIHBhaXJzLlxuICAvLyBUaGUgb3Bwb3NpdGUgb2YgXy5vYmplY3QuXG4gIF8ucGFpcnMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgcGFpcnMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhaXJzW2ldID0gW2tleXNbaV0sIG9ialtrZXlzW2ldXV07XG4gICAgfVxuICAgIHJldHVybiBwYWlycztcbiAgfTtcblxuICAvLyBJbnZlcnQgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiBhbiBvYmplY3QuIFRoZSB2YWx1ZXMgbXVzdCBiZSBzZXJpYWxpemFibGUuXG4gIF8uaW52ZXJ0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtvYmpba2V5c1tpXV1dID0ga2V5c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBzb3J0ZWQgbGlzdCBvZiB0aGUgZnVuY3Rpb24gbmFtZXMgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QuXG4gIC8vIEFsaWFzZWQgYXMgYG1ldGhvZHNgLlxuICBfLmZ1bmN0aW9ucyA9IF8ubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lcy5zb3J0KCk7XG4gIH07XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFzc2lnbmVyIGZ1bmN0aW9ucy5cbiAgdmFyIGNyZWF0ZUFzc2lnbmVyID0gZnVuY3Rpb24oa2V5c0Z1bmMsIGRlZmF1bHRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoZGVmYXVsdHMpIG9iaiA9IE9iamVjdChvYmopO1xuICAgICAgaWYgKGxlbmd0aCA8IDIgfHwgb2JqID09IG51bGwpIHJldHVybiBvYmo7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdLFxuICAgICAgICAgICAga2V5cyA9IGtleXNGdW5jKHNvdXJjZSksXG4gICAgICAgICAgICBsID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKCFkZWZhdWx0cyB8fCBvYmpba2V5XSA9PT0gdm9pZCAwKSBvYmpba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gIH07XG5cbiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIF8uZXh0ZW5kID0gY3JlYXRlQXNzaWduZXIoXy5hbGxLZXlzKTtcblxuICAvLyBBc3NpZ25zIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBvd24gcHJvcGVydGllcyBpbiB0aGUgcGFzc2VkLWluIG9iamVjdChzKS5cbiAgLy8gKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ24pXG4gIF8uZXh0ZW5kT3duID0gXy5hc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihfLmtleXMpO1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGtleSBvbiBhbiBvYmplY3QgdGhhdCBwYXNzZXMgYSBwcmVkaWNhdGUgdGVzdC5cbiAgXy5maW5kS2V5ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaiksIGtleTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2tleV0sIGtleSwgb2JqKSkgcmV0dXJuIGtleTtcbiAgICB9XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgcGljayBoZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGlmIGBvYmpgIGhhcyBrZXkgYGtleWAuXG4gIHZhciBrZXlJbk9iaiA9IGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iaikge1xuICAgIHJldHVybiBrZXkgaW4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCBvbmx5IGNvbnRhaW5pbmcgdGhlIHdoaXRlbGlzdGVkIHByb3BlcnRpZXMuXG4gIF8ucGljayA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9LCBpdGVyYXRlZSA9IGtleXNbMF07XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChfLmlzRnVuY3Rpb24oaXRlcmF0ZWUpKSB7XG4gICAgICBpZiAoa2V5cy5sZW5ndGggPiAxKSBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGtleXNbMV0pO1xuICAgICAga2V5cyA9IF8uYWxsS2V5cyhvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IGtleUluT2JqO1xuICAgICAga2V5cyA9IGZsYXR0ZW4oa2V5cywgZmFsc2UsIGZhbHNlKTtcbiAgICAgIG9iaiA9IE9iamVjdChvYmopO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgIGlmIChpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmopKSByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcblxuICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgd2l0aG91dCB0aGUgYmxhY2tsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5vbWl0ID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihvYmosIGtleXMpIHtcbiAgICB2YXIgaXRlcmF0ZWUgPSBrZXlzWzBdLCBjb250ZXh0O1xuICAgIGlmIChfLmlzRnVuY3Rpb24oaXRlcmF0ZWUpKSB7XG4gICAgICBpdGVyYXRlZSA9IF8ubmVnYXRlKGl0ZXJhdGVlKTtcbiAgICAgIGlmIChrZXlzLmxlbmd0aCA+IDEpIGNvbnRleHQgPSBrZXlzWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzID0gXy5tYXAoZmxhdHRlbihrZXlzLCBmYWxzZSwgZmFsc2UpLCBTdHJpbmcpO1xuICAgICAgaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHJldHVybiAhXy5jb250YWlucyhrZXlzLCBrZXkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIF8ucGljayhvYmosIGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgfSk7XG5cbiAgLy8gRmlsbCBpbiBhIGdpdmVuIG9iamVjdCB3aXRoIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgXy5kZWZhdWx0cyA9IGNyZWF0ZUFzc2lnbmVyKF8uYWxsS2V5cywgdHJ1ZSk7XG5cbiAgLy8gQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBnaXZlbiBwcm90b3R5cGUgb2JqZWN0LlxuICAvLyBJZiBhZGRpdGlvbmFsIHByb3BlcnRpZXMgYXJlIHByb3ZpZGVkIHRoZW4gdGhleSB3aWxsIGJlIGFkZGVkIHRvIHRoZVxuICAvLyBjcmVhdGVkIG9iamVjdC5cbiAgXy5jcmVhdGUgPSBmdW5jdGlvbihwcm90b3R5cGUsIHByb3BzKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICBpZiAocHJvcHMpIF8uZXh0ZW5kT3duKHJlc3VsdCwgcHJvcHMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgKHNoYWxsb3ctY2xvbmVkKSBkdXBsaWNhdGUgb2YgYW4gb2JqZWN0LlxuICBfLmNsb25lID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBvYmo7XG4gICAgcmV0dXJuIF8uaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBfLmV4dGVuZCh7fSwgb2JqKTtcbiAgfTtcblxuICAvLyBJbnZva2VzIGludGVyY2VwdG9yIHdpdGggdGhlIG9iaiwgYW5kIHRoZW4gcmV0dXJucyBvYmouXG4gIC8vIFRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluLCBpblxuICAvLyBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi5cbiAgXy50YXAgPSBmdW5jdGlvbihvYmosIGludGVyY2VwdG9yKSB7XG4gICAgaW50ZXJjZXB0b3Iob2JqKTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybnMgd2hldGhlciBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gc2V0IG9mIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmlzTWF0Y2ggPSBmdW5jdGlvbihvYmplY3QsIGF0dHJzKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMoYXR0cnMpLCBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiAhbGVuZ3RoO1xuICAgIHZhciBvYmogPSBPYmplY3Qob2JqZWN0KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChhdHRyc1trZXldICE9PSBvYmpba2V5XSB8fCAhKGtleSBpbiBvYmopKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgdmFyIGVxLCBkZWVwRXE7XG4gIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gICAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYjtcbiAgICAvLyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgb25seSBlcXVhbCB0byBpdHNlbGYgKHN0cmljdCBjb21wYXJpc29uKS5cbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gICAgaWYgKGEgIT09IGEpIHJldHVybiBiICE9PSBiO1xuICAgIC8vIEV4aGF1c3QgcHJpbWl0aXZlIGNoZWNrc1xuICAgIHZhciB0eXBlID0gdHlwZW9mIGE7XG4gICAgaWYgKHR5cGUgIT09ICdmdW5jdGlvbicgJiYgdHlwZSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gZGVlcEVxKGEsIGIsIGFTdGFjaywgYlN0YWNrKTtcbiAgfTtcblxuICAvLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuICBkZWVwRXEgPSBmdW5jdGlvbihhLCBiLCBhU3RhY2ssIGJTdGFjaykge1xuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxuICAgIGlmIChhIGluc3RhbmNlb2YgXykgYSA9IGEuX3dyYXBwZWQ7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDtcbiAgICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLlxuICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpO1xuICAgIGlmIChjbGFzc05hbWUgIT09IHRvU3RyaW5nLmNhbGwoYikpIHJldHVybiBmYWxzZTtcbiAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgcmVndWxhciBleHByZXNzaW9ucywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuXG4gICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOlxuICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJylcbiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgICAgcmV0dXJuICcnICsgYSA9PT0gJycgKyBiO1xuICAgICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cbiAgICAgICAgLy8gT2JqZWN0KE5hTikgaXMgZXF1aXZhbGVudCB0byBOYU4uXG4gICAgICAgIGlmICgrYSAhPT0gK2EpIHJldHVybiArYiAhPT0gK2I7XG4gICAgICAgIC8vIEFuIGBlZ2FsYCBjb21wYXJpc29uIGlzIHBlcmZvcm1lZCBmb3Igb3RoZXIgbnVtZXJpYyB2YWx1ZXMuXG4gICAgICAgIHJldHVybiArYSA9PT0gMCA/IDEgLyArYSA9PT0gMSAvIGIgOiArYSA9PT0gK2I7XG4gICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgQm9vbGVhbl0nOlxuICAgICAgICAvLyBDb2VyY2UgZGF0ZXMgYW5kIGJvb2xlYW5zIHRvIG51bWVyaWMgcHJpbWl0aXZlIHZhbHVlcy4gRGF0ZXMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyXG4gICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcbiAgICAgICAgLy8gb2YgYE5hTmAgYXJlIG5vdCBlcXVpdmFsZW50LlxuICAgICAgICByZXR1cm4gK2EgPT09ICtiO1xuICAgICAgY2FzZSAnW29iamVjdCBTeW1ib2xdJzpcbiAgICAgICAgcmV0dXJuIFN5bWJvbFByb3RvLnZhbHVlT2YuY2FsbChhKSA9PT0gU3ltYm9sUHJvdG8udmFsdWVPZi5jYWxsKGIpO1xuICAgIH1cblxuICAgIHZhciBhcmVBcnJheXMgPSBjbGFzc05hbWUgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgaWYgKCFhcmVBcnJheXMpIHtcbiAgICAgIGlmICh0eXBlb2YgYSAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAvLyBPYmplY3RzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWl2YWxlbnQsIGJ1dCBgT2JqZWN0YHMgb3IgYEFycmF5YHNcbiAgICAgIC8vIGZyb20gZGlmZmVyZW50IGZyYW1lcyBhcmUuXG4gICAgICB2YXIgYUN0b3IgPSBhLmNvbnN0cnVjdG9yLCBiQ3RvciA9IGIuY29uc3RydWN0b3I7XG4gICAgICBpZiAoYUN0b3IgIT09IGJDdG9yICYmICEoXy5pc0Z1bmN0aW9uKGFDdG9yKSAmJiBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5pc0Z1bmN0aW9uKGJDdG9yKSAmJiBiQ3RvciBpbnN0YW5jZW9mIGJDdG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAoJ2NvbnN0cnVjdG9yJyBpbiBhICYmICdjb25zdHJ1Y3RvcicgaW4gYikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBBc3N1bWUgZXF1YWxpdHkgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljXG4gICAgLy8gc3RydWN0dXJlcyBpcyBhZGFwdGVkIGZyb20gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMywgYWJzdHJhY3Qgb3BlcmF0aW9uIGBKT2AuXG5cbiAgICAvLyBJbml0aWFsaXppbmcgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgLy8gSXQncyBkb25lIGhlcmUgc2luY2Ugd2Ugb25seSBuZWVkIHRoZW0gZm9yIG9iamVjdHMgYW5kIGFycmF5cyBjb21wYXJpc29uLlxuICAgIGFTdGFjayA9IGFTdGFjayB8fCBbXTtcbiAgICBiU3RhY2sgPSBiU3RhY2sgfHwgW107XG4gICAgdmFyIGxlbmd0aCA9IGFTdGFjay5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcbiAgICAgIC8vIHVuaXF1ZSBuZXN0ZWQgc3RydWN0dXJlcy5cbiAgICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PT0gYSkgcmV0dXJuIGJTdGFja1tsZW5ndGhdID09PSBiO1xuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgZmlyc3Qgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucHVzaChhKTtcbiAgICBiU3RhY2sucHVzaChiKTtcblxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChhcmVBcnJheXMpIHtcbiAgICAgIC8vIENvbXBhcmUgYXJyYXkgbGVuZ3RocyB0byBkZXRlcm1pbmUgaWYgYSBkZWVwIGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5LlxuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoIWVxKGFbbGVuZ3RoXSwgYltsZW5ndGhdLCBhU3RhY2ssIGJTdGFjaykpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRGVlcCBjb21wYXJlIG9iamVjdHMuXG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhhKSwga2V5O1xuICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBib3RoIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllcyBiZWZvcmUgY29tcGFyaW5nIGRlZXAgZXF1YWxpdHkuXG4gICAgICBpZiAoXy5rZXlzKGIpLmxlbmd0aCAhPT0gbGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyXG4gICAgICAgIGtleSA9IGtleXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKCEoaGFzKGIsIGtleSkgJiYgZXEoYVtrZXldLCBiW2tleV0sIGFTdGFjaywgYlN0YWNrKSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnBvcCgpO1xuICAgIGJTdGFjay5wb3AoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC5cbiAgXy5pc0VxdWFsID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBlcShhLCBiKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT9cbiAgLy8gQW4gXCJlbXB0eVwiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy5cbiAgXy5pc0VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSAmJiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopIHx8IF8uaXNBcmd1bWVudHMob2JqKSkpIHJldHVybiBvYmoubGVuZ3RoID09PSAwO1xuICAgIHJldHVybiBfLmtleXMob2JqKS5sZW5ndGggPT09IDA7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5P1xuICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheVxuICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/XG4gIF8uaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHNvbWUgaXNUeXBlIG1ldGhvZHM6IGlzQXJndW1lbnRzLCBpc0Z1bmN0aW9uLCBpc1N0cmluZywgaXNOdW1iZXIsIGlzRGF0ZSwgaXNSZWdFeHAsIGlzRXJyb3IsIGlzTWFwLCBpc1dlYWtNYXAsIGlzU2V0LCBpc1dlYWtTZXQuXG4gIF8uZWFjaChbJ0FyZ3VtZW50cycsICdGdW5jdGlvbicsICdTdHJpbmcnLCAnTnVtYmVyJywgJ0RhdGUnLCAnUmVnRXhwJywgJ0Vycm9yJywgJ1N5bWJvbCcsICdNYXAnLCAnV2Vha01hcCcsICdTZXQnLCAnV2Vha1NldCddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgX1snaXMnICsgbmFtZV0gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0ICcgKyBuYW1lICsgJ10nO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIERlZmluZSBhIGZhbGxiYWNrIHZlcnNpb24gb2YgdGhlIG1ldGhvZCBpbiBicm93c2VycyAoYWhlbSwgSUUgPCA5KSwgd2hlcmVcbiAgLy8gdGhlcmUgaXNuJ3QgYW55IGluc3BlY3RhYmxlIFwiQXJndW1lbnRzXCIgdHlwZS5cbiAgaWYgKCFfLmlzQXJndW1lbnRzKGFyZ3VtZW50cykpIHtcbiAgICBfLmlzQXJndW1lbnRzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gaGFzKG9iaiwgJ2NhbGxlZScpO1xuICAgIH07XG4gIH1cblxuICAvLyBPcHRpbWl6ZSBgaXNGdW5jdGlvbmAgaWYgYXBwcm9wcmlhdGUuIFdvcmsgYXJvdW5kIHNvbWUgdHlwZW9mIGJ1Z3MgaW4gb2xkIHY4LFxuICAvLyBJRSAxMSAoIzE2MjEpLCBTYWZhcmkgOCAoIzE5MjkpLCBhbmQgUGhhbnRvbUpTICgjMjIzNikuXG4gIHZhciBub2RlbGlzdCA9IHJvb3QuZG9jdW1lbnQgJiYgcm9vdC5kb2N1bWVudC5jaGlsZE5vZGVzO1xuICBpZiAodHlwZW9mIC8uLyAhPSAnZnVuY3Rpb24nICYmIHR5cGVvZiBJbnQ4QXJyYXkgIT0gJ29iamVjdCcgJiYgdHlwZW9mIG5vZGVsaXN0ICE9ICdmdW5jdGlvbicpIHtcbiAgICBfLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09ICdmdW5jdGlvbicgfHwgZmFsc2U7XG4gICAgfTtcbiAgfVxuXG4gIC8vIElzIGEgZ2l2ZW4gb2JqZWN0IGEgZmluaXRlIG51bWJlcj9cbiAgXy5pc0Zpbml0ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhXy5pc1N5bWJvbChvYmopICYmIGlzRmluaXRlKG9iaikgJiYgIWlzTmFOKHBhcnNlRmxvYXQob2JqKSk7XG4gIH07XG5cbiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGBOYU5gP1xuICBfLmlzTmFOID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIF8uaXNOdW1iZXIob2JqKSAmJiBpc05hTihvYmopO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBib29sZWFuP1xuICBfLmlzQm9vbGVhbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSB8fCB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEJvb2xlYW5dJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGVxdWFsIHRvIG51bGw/XG4gIF8uaXNOdWxsID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gbnVsbDtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIHVuZGVmaW5lZD9cbiAgXy5pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IHZvaWQgMDtcbiAgfTtcblxuICAvLyBTaG9ydGN1dCBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHByb3BlcnR5IGRpcmVjdGx5XG4gIC8vIG9uIGl0c2VsZiAoaW4gb3RoZXIgd29yZHMsIG5vdCBvbiBhIHByb3RvdHlwZSkuXG4gIF8uaGFzID0gZnVuY3Rpb24ob2JqLCBwYXRoKSB7XG4gICAgaWYgKCFfLmlzQXJyYXkocGF0aCkpIHtcbiAgICAgIHJldHVybiBoYXMob2JqLCBwYXRoKTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwYXRoW2ldO1xuICAgICAgaWYgKG9iaiA9PSBudWxsIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmogPSBvYmpba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuICEhbGVuZ3RoO1xuICB9O1xuXG4gIC8vIFV0aWxpdHkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gUnVuIFVuZGVyc2NvcmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0c1xuICAvLyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJvb3QuXyA9IHByZXZpb3VzVW5kZXJzY29yZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBLZWVwIHRoZSBpZGVudGl0eSBmdW5jdGlvbiBhcm91bmQgZm9yIGRlZmF1bHQgaXRlcmF0ZWVzLlxuICBfLmlkZW50aXR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgLy8gUHJlZGljYXRlLWdlbmVyYXRpbmcgZnVuY3Rpb25zLiBPZnRlbiB1c2VmdWwgb3V0c2lkZSBvZiBVbmRlcnNjb3JlLlxuICBfLmNvbnN0YW50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgfTtcblxuICBfLm5vb3AgPSBmdW5jdGlvbigpe307XG5cbiAgLy8gQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gcGFzc2VkIGFuIG9iamVjdCwgd2lsbCB0cmF2ZXJzZSB0aGF0IG9iamVjdOKAmXNcbiAgLy8gcHJvcGVydGllcyBkb3duIHRoZSBnaXZlbiBgcGF0aGAsIHNwZWNpZmllZCBhcyBhbiBhcnJheSBvZiBrZXlzIG9yIGluZGV4ZXMuXG4gIF8ucHJvcGVydHkgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgaWYgKCFfLmlzQXJyYXkocGF0aCkpIHtcbiAgICAgIHJldHVybiBzaGFsbG93UHJvcGVydHkocGF0aCk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBkZWVwR2V0KG9iaiwgcGF0aCk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBHZW5lcmF0ZXMgYSBmdW5jdGlvbiBmb3IgYSBnaXZlbiBvYmplY3QgdGhhdCByZXR1cm5zIGEgZ2l2ZW4gcHJvcGVydHkuXG4gIF8ucHJvcGVydHlPZiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7fTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHJldHVybiAhXy5pc0FycmF5KHBhdGgpID8gb2JqW3BhdGhdIDogZGVlcEdldChvYmosIHBhdGgpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIHByZWRpY2F0ZSBmb3IgY2hlY2tpbmcgd2hldGhlciBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gc2V0IG9mXG4gIC8vIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLm1hdGNoZXIgPSBfLm1hdGNoZXMgPSBmdW5jdGlvbihhdHRycykge1xuICAgIGF0dHJzID0gXy5leHRlbmRPd24oe30sIGF0dHJzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gXy5pc01hdGNoKG9iaiwgYXR0cnMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuXG4gIF8udGltZXMgPSBmdW5jdGlvbihuLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciBhY2N1bSA9IEFycmF5KE1hdGgubWF4KDAsIG4pKTtcbiAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQsIDEpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSBhY2N1bVtpXSA9IGl0ZXJhdGVlKGkpO1xuICAgIHJldHVybiBhY2N1bTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLlxuICBfLnJhbmRvbSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICBtYXggPSBtaW47XG4gICAgICBtaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgfTtcblxuICAvLyBBIChwb3NzaWJseSBmYXN0ZXIpIHdheSB0byBnZXQgdGhlIGN1cnJlbnQgdGltZXN0YW1wIGFzIGFuIGludGVnZXIuXG4gIF8ubm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9O1xuXG4gIC8vIExpc3Qgb2YgSFRNTCBlbnRpdGllcyBmb3IgZXNjYXBpbmcuXG4gIHZhciBlc2NhcGVNYXAgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiN4Mjc7JyxcbiAgICAnYCc6ICcmI3g2MDsnXG4gIH07XG4gIHZhciB1bmVzY2FwZU1hcCA9IF8uaW52ZXJ0KGVzY2FwZU1hcCk7XG5cbiAgLy8gRnVuY3Rpb25zIGZvciBlc2NhcGluZyBhbmQgdW5lc2NhcGluZyBzdHJpbmdzIHRvL2Zyb20gSFRNTCBpbnRlcnBvbGF0aW9uLlxuICB2YXIgY3JlYXRlRXNjYXBlciA9IGZ1bmN0aW9uKG1hcCkge1xuICAgIHZhciBlc2NhcGVyID0gZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHJldHVybiBtYXBbbWF0Y2hdO1xuICAgIH07XG4gICAgLy8gUmVnZXhlcyBmb3IgaWRlbnRpZnlpbmcgYSBrZXkgdGhhdCBuZWVkcyB0byBiZSBlc2NhcGVkLlxuICAgIHZhciBzb3VyY2UgPSAnKD86JyArIF8ua2V5cyhtYXApLmpvaW4oJ3wnKSArICcpJztcbiAgICB2YXIgdGVzdFJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UpO1xuICAgIHZhciByZXBsYWNlUmVnZXhwID0gUmVnRXhwKHNvdXJjZSwgJ2cnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcgPT0gbnVsbCA/ICcnIDogJycgKyBzdHJpbmc7XG4gICAgICByZXR1cm4gdGVzdFJlZ2V4cC50ZXN0KHN0cmluZykgPyBzdHJpbmcucmVwbGFjZShyZXBsYWNlUmVnZXhwLCBlc2NhcGVyKSA6IHN0cmluZztcbiAgICB9O1xuICB9O1xuICBfLmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIoZXNjYXBlTWFwKTtcbiAgXy51bmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIodW5lc2NhcGVNYXApO1xuXG4gIC8vIFRyYXZlcnNlcyB0aGUgY2hpbGRyZW4gb2YgYG9iamAgYWxvbmcgYHBhdGhgLiBJZiBhIGNoaWxkIGlzIGEgZnVuY3Rpb24sIGl0XG4gIC8vIGlzIGludm9rZWQgd2l0aCBpdHMgcGFyZW50IGFzIGNvbnRleHQuIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBmaW5hbFxuICAvLyBjaGlsZCwgb3IgYGZhbGxiYWNrYCBpZiBhbnkgY2hpbGQgaXMgdW5kZWZpbmVkLlxuICBfLnJlc3VsdCA9IGZ1bmN0aW9uKG9iaiwgcGF0aCwgZmFsbGJhY2spIHtcbiAgICBpZiAoIV8uaXNBcnJheShwYXRoKSkgcGF0aCA9IFtwYXRoXTtcbiAgICB2YXIgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgIHJldHVybiBfLmlzRnVuY3Rpb24oZmFsbGJhY2spID8gZmFsbGJhY2suY2FsbChvYmopIDogZmFsbGJhY2s7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwcm9wID0gb2JqID09IG51bGwgPyB2b2lkIDAgOiBvYmpbcGF0aFtpXV07XG4gICAgICBpZiAocHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHByb3AgPSBmYWxsYmFjaztcbiAgICAgICAgaSA9IGxlbmd0aDsgLy8gRW5zdXJlIHdlIGRvbid0IGNvbnRpbnVlIGl0ZXJhdGluZy5cbiAgICAgIH1cbiAgICAgIG9iaiA9IF8uaXNGdW5jdGlvbihwcm9wKSA/IHByb3AuY2FsbChvYmopIDogcHJvcDtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnRlZ2VyIGlkICh1bmlxdWUgd2l0aGluIHRoZSBlbnRpcmUgY2xpZW50IHNlc3Npb24pLlxuICAvLyBVc2VmdWwgZm9yIHRlbXBvcmFyeSBET00gaWRzLlxuICB2YXIgaWRDb3VudGVyID0gMDtcbiAgXy51bmlxdWVJZCA9IGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIHZhciBpZCA9ICsraWRDb3VudGVyICsgJyc7XG4gICAgcmV0dXJuIHByZWZpeCA/IHByZWZpeCArIGlkIDogaWQ7XG4gIH07XG5cbiAgLy8gQnkgZGVmYXVsdCwgVW5kZXJzY29yZSB1c2VzIEVSQi1zdHlsZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLCBjaGFuZ2UgdGhlXG4gIC8vIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgXy50ZW1wbGF0ZVNldHRpbmdzID0ge1xuICAgIGV2YWx1YXRlOiAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgIGludGVycG9sYXRlOiAvPCU9KFtcXHNcXFNdKz8pJT4vZyxcbiAgICBlc2NhcGU6IC88JS0oW1xcc1xcU10rPyklPi9nXG4gIH07XG5cbiAgLy8gV2hlbiBjdXN0b21pemluZyBgdGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhblxuICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzXG4gIC8vIGd1YXJhbnRlZWQgbm90IHRvIG1hdGNoLlxuICB2YXIgbm9NYXRjaCA9IC8oLileLztcblxuICAvLyBDZXJ0YWluIGNoYXJhY3RlcnMgbmVlZCB0byBiZSBlc2NhcGVkIHNvIHRoYXQgdGhleSBjYW4gYmUgcHV0IGludG8gYVxuICAvLyBzdHJpbmcgbGl0ZXJhbC5cbiAgdmFyIGVzY2FwZXMgPSB7XG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXFxcJzogJ1xcXFwnLFxuICAgICdcXHInOiAncicsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgdmFyIGVzY2FwZVJlZ0V4cCA9IC9cXFxcfCd8XFxyfFxcbnxcXHUyMDI4fFxcdTIwMjkvZztcblxuICB2YXIgZXNjYXBlQ2hhciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIGVzY2FwZXNbbWF0Y2hdO1xuICB9O1xuXG4gIC8vIEphdmFTY3JpcHQgbWljcm8tdGVtcGxhdGluZywgc2ltaWxhciB0byBKb2huIFJlc2lnJ3MgaW1wbGVtZW50YXRpb24uXG4gIC8vIFVuZGVyc2NvcmUgdGVtcGxhdGluZyBoYW5kbGVzIGFyYml0cmFyeSBkZWxpbWl0ZXJzLCBwcmVzZXJ2ZXMgd2hpdGVzcGFjZSxcbiAgLy8gYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuXG4gIC8vIE5COiBgb2xkU2V0dGluZ3NgIG9ubHkgZXhpc3RzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRleHQsIHNldHRpbmdzLCBvbGRTZXR0aW5ncykge1xuICAgIGlmICghc2V0dGluZ3MgJiYgb2xkU2V0dGluZ3MpIHNldHRpbmdzID0gb2xkU2V0dGluZ3M7XG4gICAgc2V0dGluZ3MgPSBfLmRlZmF1bHRzKHt9LCBzZXR0aW5ncywgXy50ZW1wbGF0ZVNldHRpbmdzKTtcblxuICAgIC8vIENvbWJpbmUgZGVsaW1pdGVycyBpbnRvIG9uZSByZWd1bGFyIGV4cHJlc3Npb24gdmlhIGFsdGVybmF0aW9uLlxuICAgIHZhciBtYXRjaGVyID0gUmVnRXhwKFtcbiAgICAgIChzZXR0aW5ncy5lc2NhcGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2VcbiAgICBdLmpvaW4oJ3wnKSArICd8JCcsICdnJyk7XG5cbiAgICAvLyBDb21waWxlIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGVzY2FwaW5nIHN0cmluZyBsaXRlcmFscyBhcHByb3ByaWF0ZWx5LlxuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNvdXJjZSA9IFwiX19wKz0nXCI7XG4gICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7XG4gICAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKGVzY2FwZVJlZ0V4cCwgZXNjYXBlQ2hhcik7XG4gICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgaWYgKGVzY2FwZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInK1xcbigoX190PShcIiArIGVzY2FwZSArIFwiKSk9PW51bGw/Jyc6Xy5lc2NhcGUoX190KSkrXFxuJ1wiO1xuICAgICAgfSBlbHNlIGlmIChpbnRlcnBvbGF0ZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInK1xcbigoX190PShcIiArIGludGVycG9sYXRlICsgXCIpKT09bnVsbD8nJzpfX3QpK1xcbidcIjtcbiAgICAgIH0gZWxzZSBpZiAoZXZhbHVhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlICsgXCJcXG5fX3ArPSdcIjtcbiAgICAgIH1cblxuICAgICAgLy8gQWRvYmUgVk1zIG5lZWQgdGhlIG1hdGNoIHJldHVybmVkIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3Qgb2Zmc2V0LlxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLlxuICAgIGlmICghc2V0dGluZ3MudmFyaWFibGUpIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xcbicgKyBzb3VyY2UgKyAnfVxcbic7XG5cbiAgICBzb3VyY2UgPSBcInZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixcIiArXG4gICAgICBcInByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307XFxuXCIgK1xuICAgICAgc291cmNlICsgJ3JldHVybiBfX3A7XFxuJztcblxuICAgIHZhciByZW5kZXI7XG4gICAgdHJ5IHtcbiAgICAgIHJlbmRlciA9IG5ldyBGdW5jdGlvbihzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJywgJ18nLCBzb3VyY2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGUuc291cmNlID0gc291cmNlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgZGF0YSwgXyk7XG4gICAgfTtcblxuICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cbiAgICB2YXIgYXJndW1lbnQgPSBzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJztcbiAgICB0ZW1wbGF0ZS5zb3VyY2UgPSAnZnVuY3Rpb24oJyArIGFyZ3VtZW50ICsgJyl7XFxuJyArIHNvdXJjZSArICd9JztcblxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfTtcblxuICAvLyBBZGQgYSBcImNoYWluXCIgZnVuY3Rpb24uIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5jaGFpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBpbnN0YW5jZSA9IF8ob2JqKTtcbiAgICBpbnN0YW5jZS5fY2hhaW4gPSB0cnVlO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcblxuICAvLyBPT1BcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gIC8vIElmIFVuZGVyc2NvcmUgaXMgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGl0IHJldHVybnMgYSB3cmFwcGVkIG9iamVjdCB0aGF0XG4gIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlXG4gIC8vIHVuZGVyc2NvcmUgZnVuY3Rpb25zLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLlxuICB2YXIgY2hhaW5SZXN1bHQgPSBmdW5jdGlvbihpbnN0YW5jZSwgb2JqKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLl9jaGFpbiA/IF8ob2JqKS5jaGFpbigpIDogb2JqO1xuICB9O1xuXG4gIC8vIEFkZCB5b3VyIG93biBjdXN0b20gZnVuY3Rpb25zIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5taXhpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIF8uZWFjaChfLmZ1bmN0aW9ucyhvYmopLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IF9bbmFtZV0gPSBvYmpbbmFtZV07XG4gICAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IFt0aGlzLl93cmFwcGVkXTtcbiAgICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gY2hhaW5SZXN1bHQodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBfO1xuICB9O1xuXG4gIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgXy5taXhpbihfKTtcblxuICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuICBfLmVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT09ICdzaGlmdCcgfHwgbmFtZSA9PT0gJ3NwbGljZScpICYmIG9iai5sZW5ndGggPT09IDApIGRlbGV0ZSBvYmpbMF07XG4gICAgICByZXR1cm4gY2hhaW5SZXN1bHQodGhpcywgb2JqKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBBZGQgYWxsIGFjY2Vzc29yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbiAgXy5lYWNoKFsnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY2hhaW5SZXN1bHQodGhpcywgbWV0aG9kLmFwcGx5KHRoaXMuX3dyYXBwZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIEV4dHJhY3RzIHRoZSByZXN1bHQgZnJvbSBhIHdyYXBwZWQgYW5kIGNoYWluZWQgb2JqZWN0LlxuICBfLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl93cmFwcGVkO1xuICB9O1xuXG4gIC8vIFByb3ZpZGUgdW53cmFwcGluZyBwcm94eSBmb3Igc29tZSBtZXRob2RzIHVzZWQgaW4gZW5naW5lIG9wZXJhdGlvbnNcbiAgLy8gc3VjaCBhcyBhcml0aG1ldGljIGFuZCBKU09OIHN0cmluZ2lmaWNhdGlvbi5cbiAgXy5wcm90b3R5cGUudmFsdWVPZiA9IF8ucHJvdG90eXBlLnRvSlNPTiA9IF8ucHJvdG90eXBlLnZhbHVlO1xuXG4gIF8ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLl93cmFwcGVkKTtcbiAgfTtcblxuICAvLyBBTUQgcmVnaXN0cmF0aW9uIGhhcHBlbnMgYXQgdGhlIGVuZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIEFNRCBsb2FkZXJzXG4gIC8vIHRoYXQgbWF5IG5vdCBlbmZvcmNlIG5leHQtdHVybiBzZW1hbnRpY3Mgb24gbW9kdWxlcy4gRXZlbiB0aG91Z2ggZ2VuZXJhbFxuICAvLyBwcmFjdGljZSBmb3IgQU1EIHJlZ2lzdHJhdGlvbiBpcyB0byBiZSBhbm9ueW1vdXMsIHVuZGVyc2NvcmUgcmVnaXN0ZXJzXG4gIC8vIGFzIGEgbmFtZWQgbW9kdWxlIGJlY2F1c2UsIGxpa2UgalF1ZXJ5LCBpdCBpcyBhIGJhc2UgbGlicmFyeSB0aGF0IGlzXG4gIC8vIHBvcHVsYXIgZW5vdWdoIHRvIGJlIGJ1bmRsZWQgaW4gYSB0aGlyZCBwYXJ0eSBsaWIsIGJ1dCBub3QgYmUgcGFydCBvZlxuICAvLyBhbiBBTUQgbG9hZCByZXF1ZXN0LiBUaG9zZSBjYXNlcyBjb3VsZCBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGFuXG4gIC8vIGFub255bW91cyBkZWZpbmUoKSBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGxvYWRlciByZXF1ZXN0LlxuICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoJ3VuZGVyc2NvcmUnLCBbXSwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxufSgpKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=